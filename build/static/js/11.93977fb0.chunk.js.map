{"version":3,"sources":["components/city/AddCity/index.js","components/city/EditCity/index.js","routes/settings/Cities/index.js","components/subject/AddSubject/index.js","components/subject/EditSubject/index.js","routes/settings/Subjects/index.js","components/coupon/AddCoupon/index.js","components/coupon/EditCoupon/index.js","routes/settings/Coupons/index.js","components/nationality/AddNationality/index.js","components/nationality/EditNationality/index.js","routes/settings/Nationalities/index.js","components/level/AddLevel/index.js","components/level/EditLevel/index.js","routes/settings/Levels/index.js","routes/settings/index.js"],"names":["AddCity","state","name","this","props","onAddCity","onToggleModal","open","okText","SaveFilled","cancelText","IntlMessages","id","title","toggle","visible","closable","onOk","setState","onCancel","className","defaultMessage","placeholder","required","value","onChange","event","target","margin","React","Component","memo","onSaveCity","city","useState","setName","useEffect","Object","keys","length","console","log","Cities","selectedRowKeys","loading","addCityState","editCityState","modal","onEditCity","data","a","CreateCity","fetchCities","UpdateCity","onSelectChange","confirm","ids","DeleteCity","then","message","success","catch","error","handleVisibleChange","cancel","e","rowSelection","hasSelected","columns","dataIndex","align","key","render","onClick","type","icon","EditOutlined","span","size","PlusCircleFilled","onVisibleChange","placement","onConfirm","DeleteOutlined","disabled","style","marginLeft","rowKey","record","bordered","dataSource","cities","connect","AddSubject","onAddSubject","onSaveSubject","subject","Subjects","addSubjectState","editSubjectState","onEditSubject","CreateSubject","fetchSubjects","UpdateSubject","DeleteSubject","direction","subjects","TextArea","Input","RangePicker","DatePicker","AddCoupon","dates","dateStrings","start","end","code","discount","description","onAddCoupon","ranges","Today","moment","endOf","onSaveCoupon","coupon","setCode","setDiscount","setDescription","setStartDate","setEndDate","Coupons","addCouponState","editCouponState","onEditCoupon","CreateCoupon","fetchCoupons","UpdateCoupon","DeleteCoupon","format","status","checkedChildren","unCheckedChildren","defaultChecked","checked","loadingTable","err","width","coupons","AddNationality","onAddNationality","onSaveNationality","nationality","Nationalities","addNationalityState","editNationalityState","onEditNationality","CreateNationality","fetchNationalities","UpdateNationality","DeleteNationalities","pagination","position","nationalities","AddLevel","onAddLevel","onSaveLevel","level","Levels","addLevelState","editLevelState","onEditLevel","CreateLevel","fetchLevels","UpdateLevel","DeleteLevel","dir","levels","Settings","match","path","url","component"],"mappings":"8WA2DeA,E,kDApDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,IAHI,E,qDAOJ,IAAD,SACoCC,KAAKC,MAAxCC,EADD,EACCA,UAAWC,EADZ,EACYA,cAAeC,EAD3B,EAC2BA,KAC1BL,EAASC,KAAKF,MAAdC,KACR,OACE,kBAAC,IAAD,CACEM,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,iBACxBE,OAAQR,EAAeS,QAASR,EAChCS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,gBACdD,EAAU,CAAEH,SACZ,EAAKgB,SAAS,CAAEhB,KAAM,OAExBiB,SAAU,WACRb,EAAc,gBACd,EAAKY,SAAS,CAAEhB,KAAM,OAGxB,yBAAMkB,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAOtB,EACPoB,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAW,EAAKR,SAAS,CAAChB,KAAMwB,EAAMC,OAAOH,SACvDI,OAAO,oB,GAzCDC,IAAMC,W,SCqDbD,MAAME,MArDJ,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,WAAY1B,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,KAAM0B,EAAW,EAAXA,KAAW,EAEpCC,mBAAS,IAF2B,mBAErDhC,EAFqD,KAE/CiC,EAF+C,KAW5D,OAPAC,qBAAU,WACwB,IAA7BC,OAAOC,KAAKL,GAAMM,SACnBC,QAAQC,IAAIR,EAAK/B,MACjBiC,EAAQF,EAAK/B,SAEd,CAAC+B,IAGF,kBAAC,IAAD,CACEzB,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,kBACxBE,OAAQR,EACRS,QAASR,EACTS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,iBACd0B,EAAW,CAAEpB,GAAGqB,EAAKrB,GAAKV,SAC1BiC,EAAQjC,KAEViB,SAAU,WACRb,EAAc,iBACd6B,EAAQF,EAAK/B,QAGf,yBAAMkB,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACZ,kBAAC,IAAD,CACEC,UAAQ,EACRD,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAWS,EAAQT,EAAMC,OAAOH,QAC1CA,MAAOtB,EACP0B,OAAO,mB,SCtCjBc,E,4MACJzC,MAAQ,CACN0C,gBAAiB,GACjBC,SAAS,EACTX,KAAK,GACLY,cAAa,EACbC,eAAc,EACd/B,SAAS,G,EAOXT,cAAgB,SAACyC,GACf,EAAK7B,UAAS,SAAAjB,GAAK,sBAChB8C,GAAQ9C,EAAM8C,Q,EAInBC,WAAa,SAACC,GACZ,EAAK/B,SAAS,CAACe,KAAKgB,IAAO,WACzB,EAAK3C,cAAc,qB,EAIvBD,U,uCAAY,WAAO4C,GAAP,SAAAC,EAAA,sEACJ,EAAK9C,MAAM+C,WAAW,CAACF,SADnB,uBAEJ,EAAK7C,MAAMgD,cAFP,2C,wDAKZpB,W,uCAAa,WAAOiB,GAAP,SAAAC,EAAA,sEACL,EAAK9C,MAAMiD,WAAW,CAACJ,SADlB,uBAEL,EAAK7C,MAAMgD,cAFN,2C,wDAKbE,eAAiB,SAACX,GAChBH,QAAQC,IAAI,4BAA6BE,GACzC,EAAKzB,SAAS,CAAEyB,qB,EAGlBY,QAAU,SAACC,GACT,EAAKtC,SAAS,CAAE0B,SAAS,IACzB,EAAKxC,MAAMqD,WAAW,CAACD,QACtBE,KADD,sBACO,sBAAAR,EAAA,sEACC,EAAK9C,MAAMgD,cADZ,OAELO,IAAQC,QAAQ,8EAChB,EAAK1C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,KAH5C,4CAIJkB,OAAM,WACPF,IAAQG,MAAM,gGACd,EAAK5C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,S,EAIrDoB,oBAAsB,SAAChD,GACQ,EAAKd,MAA1B0C,gBAEYJ,OAAS,GAC3B,EAAKrB,SAAS,CAACH,a,EAGnBiD,OAAS,SAACC,GACR,EAAK/C,SAAS,CAAEyB,gBAAgB,M,kEAnDhCxC,KAAKC,MAAMgD,gB,+BAsDH,IAAD,SAC8CjD,KAAKF,MAAnD2C,EADA,EACAA,QAASD,EADT,EACSA,gBAAkBV,EAD3B,EAC2BA,KAAQlB,EADnC,EACmCA,QACpCmD,EAAe,CACnBvB,kBACAlB,SAAUtB,KAAKmD,gBAEXa,EAAcxB,EAAgBJ,OAAS,EACvC6B,EAAU,CAAC,CACfvD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,iBACxByD,UAAW,OACXC,MAAM,SACN,CACAzD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,sBAAuByD,UAAW,GAAIE,IAAK,IAAKC,OAAQ,SAACvB,GAAD,OAC9E,8BACE,kBAAC,IAAD,CAAQwB,QAAS,kBAAM,EAAKzB,WAAWC,IAAQyB,KAAK,UAAUC,KAAM,kBAACC,EAAA,EAAD,OAApE,sCAGLN,MAAM,UAGP,OACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKO,KAAM,IACV,kBAAC,IAAD,CAAMhE,MAAO,4BAAI,kBAACF,EAAA,EAAD,CAAcC,GAAG,qBAC9B,kBAAC,IAAD,CAAQ6D,QAAS,kBAAM,EAAKnE,cAAc,iBAAiBwE,KAAK,QAAQH,KAAM,kBAACI,EAAA,EAAD,MAAuBL,KAAK,YAC1G,kBAAC,IAAD,CAASA,KAAK,aACd,kBAAC,IAAD,CAAY3D,QAASA,EAASiE,gBAAiB7E,KAAK4D,oBAAsBkB,UAAU,UAAWpE,MAAM,wEAAiBqE,UAAY,kBAAM,EAAK3B,QAAQZ,IAAmBxB,SAAUhB,KAAK6D,OAAQxD,OAAO,qBAAME,WAAW,gBACrN,kBAAC,IAAD,CAASoE,KAAK,QAAQH,KAAM,kBAACQ,EAAA,EAAD,MAAmBC,UAAWjB,EAAaO,KAAK,SAAS9B,QAASA,KAElG,yBAAKxB,UAAU,WACb,0BAAMiE,MAAO,CAACC,WAAY,IACvBnB,EAAW,sDAAexB,EAAgBJ,OAA/B,mCAAgD,KAGhE,kBAAC,EAAD,CAAShC,KAAMJ,KAAKF,MAAM4C,aAAcxC,UAAWF,KAAKE,UAAWC,cAAeH,KAAKG,gBACvF,kBAAC,EAAD,CAAUC,KAAMJ,KAAKF,MAAM6C,cAAeb,KAAMA,EAAMD,WAAY7B,KAAK6B,WAAY1B,cAAeH,KAAKG,gBACvG,kBAAC,IAAD,CAAOiF,OAAQ,SAAAC,GAAM,OAAIA,EAAO5E,IAAI6E,UAAU,EAAMrE,UAAU,sBAAsB8C,aAAcA,EAAcE,QAASA,EAASsB,WAAYvF,KAAKC,MAAMuF,gB,GArG9I9D,IAAMC,WAmHZ8D,mBANf,SAAyB3F,GACvB,MAAO,CACL0F,OAAQ1F,EAAM0F,UAIqB,CAAEvC,gBAAcD,eAAaE,eAAaI,gBAAlEmC,CAAiFlD,G,SClEjFmD,E,kDApDb,aAAe,IAAD,8BACZ,gBACK5F,MAAQ,CACXC,KAAM,IAHI,E,qDAOJ,IAAD,SACuCC,KAAKC,MAA3C0F,EADD,EACCA,aAAcxF,EADf,EACeA,cAAeC,EAD9B,EAC8BA,KAC7BL,EAASC,KAAKF,MAAdC,KACR,OACE,kBAAC,IAAD,CACEM,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,uBACxBE,OAAQR,EAAeS,QAASR,EAChCS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,mBACdwF,EAAa,CAAE5F,SACf,EAAKgB,SAAS,CAAEhB,KAAM,OAExBiB,SAAU,WACRb,EAAc,mBACd,EAAKY,SAAS,CAAEhB,KAAM,OAGxB,yBAAMkB,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAOtB,EACPoB,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAW,EAAKR,SAAS,CAAChB,KAAMwB,EAAMC,OAAOH,SACvDI,OAAO,oB,GAzCEC,IAAMC,WCqDhBD,MAAME,MArDD,SAAC,GAAqD,IAAnDgE,EAAkD,EAAlDA,cAAezF,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,KAAMyF,EAAc,EAAdA,QAAc,EAE7C9D,mBAAS,IAFoC,mBAE9DhC,EAF8D,KAExDiC,EAFwD,KAWrE,OAPAC,qBAAU,WAC2B,IAAhCC,OAAOC,KAAK0D,GAASzD,SACtBC,QAAQC,IAAIuD,EAAQ9F,MACpBiC,EAAQ6D,EAAQ9F,SAEjB,CAAC8F,IAGF,kBAAC,IAAD,CACExF,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,wBACxBE,OAAQR,EACRS,QAASR,EACTS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,oBACdyF,EAAc,CAAEnF,GAAGoF,EAAQpF,GAAKV,SAChCiC,EAAQjC,KAEViB,SAAU,WACRb,EAAc,oBACd6B,EAAQ6D,EAAQ9F,QAGlB,yBAAMkB,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACZ,kBAAC,IAAD,CACEC,UAAQ,EACRD,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAWS,EAAQT,EAAMC,OAAOH,QAC1CA,MAAOtB,EACP0B,OAAO,mBCvCjBqE,E,4MACJhG,MAAQ,CACN0C,gBAAiB,GACjBC,SAAS,EACToD,QAAQ,CACN9F,KAAK,IAEPgG,iBAAgB,EAChBC,kBAAiB,EACjBpF,SAAS,G,EAOXT,cAAgB,SAACyC,GACf,EAAK7B,UAAS,SAAAjB,GAAK,sBAChB8C,GAAQ9C,EAAM8C,Q,EAInBqD,cAAgB,SAACnD,GACf,EAAK/B,SAAS,CAAC8E,QAAQ/C,IAAO,WAC5B,EAAK3C,cAAc,wB,EAIvBwF,a,uCAAe,WAAO7C,GAAP,SAAAC,EAAA,sEACP,EAAK9C,MAAMiG,cAAc,CAACpD,SADnB,uBAEP,EAAK7C,MAAMkG,gBAFJ,2C,wDAKfP,c,uCAAgB,WAAO9C,GAAP,SAAAC,EAAA,sEACR,EAAK9C,MAAMmG,cAAc,CAACtD,SADlB,uBAER,EAAK7C,MAAMkG,gBAFH,2C,wDAKhBhD,eAAiB,SAACX,GAChBH,QAAQC,IAAI,4BAA6BE,GACzC,EAAKzB,SAAS,CAAEyB,qB,EAGlBY,QAAU,SAACC,GACT,EAAKtC,SAAS,CAAE0B,SAAS,IACzB,EAAKxC,MAAMoG,cAAc,CAAChD,QACzBE,KADD,sBACO,sBAAAR,EAAA,sEACC,EAAK9C,MAAMkG,gBADZ,OAEL3C,IAAQC,QAAQ,wEAChB,EAAK1C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,KAH5C,4CAIJkB,OAAM,WACPF,IAAQG,MAAM,gGACd,EAAK5C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,S,EAIrDqB,OAAS,SAACC,GACR,EAAK/C,SAAS,CAAEyB,gBAAgB,M,EAGlCoB,oBAAsB,SAAChD,GACQ,EAAKd,MAA1B0C,gBAEYJ,OAAS,GAC3B,EAAKrB,SAAS,CAACH,a,kEAnDjBZ,KAAKC,MAAMkG,kB,+BAuDH,IAAD,SACgDnG,KAAKF,MAArD2C,EADA,EACAA,QAASD,EADT,EACSA,gBAAkB5B,EAD3B,EAC2BA,QAAUiF,EADrC,EACqCA,QACtC9B,EAAe,CACnBvB,kBACAlB,SAAUtB,KAAKmD,gBAEXa,EAAcxB,EAAgBJ,OAAS,EAEvC6B,EAAU,CAAC,CACfvD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,iBACxByD,UAAW,OACXC,MAAM,SACN,CACAzD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,sBAAuByD,UAAW,GAAIE,IAAK,IAAKC,OAAQ,SAACvB,GAAD,OAC9E,8BACE,kBAAC,IAAD,CAAQwB,QAAS,kBAAM,EAAK2B,cAAcnD,IAAOyB,KAAK,UAAUC,KAAM,kBAACC,EAAA,EAAD,OAAtE,sCAGLN,MAAM,UAIP,OACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKO,KAAM,IACV,kBAAC,IAAD,CAAMhE,MAAO,4BAAI,kBAACF,EAAA,EAAD,CAAcC,GAAG,wBAC9B,kBAAC,IAAD,CAAS6D,QAAS,kBAAM,EAAKnE,cAAc,oBAAoBwE,KAAK,QAAQH,KAAM,kBAACI,EAAA,EAAD,MAAuBL,KAAK,YAC9G,kBAAC,IAAD,CAASA,KAAK,aACd,kBAAC,IAAD,CAAY3D,QAASA,EAASiE,gBAAiB7E,KAAK4D,oBAAsBkB,UAAU,UAAWpE,MAAM,wEAAiBqE,UAAY,kBAAM,EAAK3B,QAAQZ,IAAmBxB,SAAUhB,KAAK6D,OAAQxD,OAAO,qBAAME,WAAW,gBACrN,kBAAC,IAAD,CAASoE,KAAK,QAAQH,KAAM,kBAACQ,EAAA,EAAD,MAAmBC,UAAWjB,EAAaO,KAAK,SAAS9B,QAASA,KAElG,yBAAKxB,UAAU,WACb,0BAAMiE,MAAO,CAACC,WAAY,IACvBnB,EAAW,sDAAexB,EAAgBJ,OAA/B,mCAAgD,KAGhE,kBAAC,EAAD,CAAYhC,KAAMJ,KAAKF,MAAMiG,gBAAiBJ,aAAc3F,KAAK2F,aAAcxF,cAAeH,KAAKG,gBACnG,kBAAC,EAAD,CAAaC,KAAMJ,KAAKF,MAAMkG,iBAAkBH,QAASA,EAASD,cAAe5F,KAAK4F,cAAezF,cAAeH,KAAKG,gBACzH,kBAAC,IAAD,CAAOiF,OAAQ,SAAAC,GAAM,OAAIA,EAAO5E,IAAI6F,UAAU,MAAOhB,UAAU,EAAMrE,UAAU,sBAAsB8C,aAAcA,EAAcE,QAASA,EAASsB,WAAYvF,KAAKC,MAAMsG,kB,GA1G7J7E,IAAMC,WAwHd8D,mBANf,SAAyB3F,GACvB,MAAO,CACLyG,SAAUzG,EAAMyG,YAIoB,CAAEJ,kBAAgBD,kBAAgBE,kBAAgBC,mBAA3EZ,CAA4FK,G,oCC1HpGU,EAAYC,IAAZD,SACDE,EAAcC,IAAWD,YAyHhBE,E,kDAtHb,WAAY3G,GAAQ,IAAD,8BACjB,gBAYFqB,SAAW,SAACuF,EAAOC,GACjB,EAAK/F,SAAS,CAAEgG,MAAQD,EAAY,GAAKE,IAAMF,EAAY,KAC3DzE,QAAQC,IAAIuE,IAZZ,EAAK/G,MAAQ,CACXC,KAAM,GACNkH,KAAK,GACLC,SAAS,GACTC,YAAY,GACZJ,MAAM,GACNC,IAAI,IATW,E,qDAkBT,IAAD,SACsChH,KAAKC,MAA1CmH,EADD,EACCA,YAAajH,EADd,EACcA,cAAeC,EAD7B,EAC6BA,KAD7B,EAEwDJ,KAAKF,MAA5DC,EAFD,EAECA,KAAOkH,EAFR,EAEQA,KAAOC,EAFf,EAEeA,SAAWH,EAF1B,EAE0BA,MAAQC,EAFlC,EAEkCA,IAAMG,EAFxC,EAEwCA,YAC/C,OACE,kBAAC,IAAD,CACE9G,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,qBACxBE,OAAQR,EAAeS,QAASR,EAChCS,UAAU,EACVC,KAAM,WACS,KAATf,GAAwB,KAATkH,GAA4B,KAAbC,GAA6B,KAAVH,GAAwB,KAARC,GAA8B,KAAhBG,IAEnFhH,EAAc,kBACdiH,EAAY,CAAErH,OAAOkH,OAAOC,WAAWH,QAAQC,MAAMG,gBACrD,EAAKpG,SAAS,CAAEhB,KAAM,GAAKkH,KAAM,GAAKC,SAAU,GAAKH,MAAO,GAAKC,IAAK,GAAKG,YAAY,OAEzFnG,SAAU,WACRb,EAAc,kBACd,EAAKY,SAAS,CAAEhB,KAAM,GAAKkH,KAAM,GAAKC,SAAU,GAAKH,MAAO,GAAKC,IAAK,GAAKG,YAAY,OAGzF,yBAAMlG,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAOtB,EACPoB,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAW,EAAKR,SAAS,CAAChB,KAAMwB,EAAMC,OAAOH,SACvDI,OAAO,aAKX,yBAAKR,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAO4F,EACP9F,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAW,EAAKR,SAAS,CAACkG,KAAM1F,EAAMC,OAAOH,SACvDI,OAAO,aAMX,yBAAKR,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,mBAAmBS,eAAe,aAEpD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAO6F,EACP/F,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAW,EAAKR,SAAS,CAACmG,SAAU3F,EAAMC,OAAOH,SAC3DI,OAAO,aAMX,yBAAKR,UAAU,iBACb,kBAAC,IAAD,CAAkBR,GAAG,sBAAsBS,eAAe,gBAExD,SAAAC,GAAW,OACT,kBAACqF,EAAD,CACApF,UAAQ,EACRC,MAAO8F,EACPhG,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAW,EAAKR,SAAS,CAACoG,YAAa5F,EAAMC,OAAOH,SAC9DI,OAAO,aAMb,yBAAKR,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,mBAAmBS,eAAe,aAEpD,SAAAC,GAAW,OACV,kBAACuF,EAAD,CAAczF,UAAU,mBAAmBoG,OAAQ,CAACC,MAAO,CAACC,MAAUA,OAAW,aAAc,CAACA,MAAUA,MAASC,MAAM,WAAYlG,SAAU,EAAKA,sB,GA1G5II,IAAMC,WCHxB+E,EAAcC,IAAWD,YACxBF,EAAYC,IAAZD,SAkIQ9E,MAAME,MA/HF,SAAC,GAAmD,IAAjD6F,EAAgD,EAAhDA,aAActH,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,KAAMsH,EAAa,EAAbA,OAAa,EAE1C3F,mBAAS,IAFiC,mBAE3DhC,EAF2D,KAErDiC,EAFqD,OAG1CD,mBAAS,IAHiC,mBAG3DkF,EAH2D,KAGrDU,EAHqD,OAIlC5F,mBAAS,IAJyB,mBAI3DmF,EAJ2D,KAIjDU,EAJiD,OAK5B7F,mBAAS,IALmB,mBAK3DoF,EAL2D,KAK9CU,EAL8C,OAMpC9F,mBAAS,IAN2B,mBAM3DgF,EAN2D,KAMpDe,EANoD,OAOxC/F,mBAAS,IAP+B,mBAO3DiF,EAP2D,KAOtDe,EAPsD,KASlE9F,qBAAU,WAC0B,IAA/BC,OAAOC,KAAKuF,GAAQtF,SACrBJ,EAAQ0F,EAAO3H,MACf4H,EAAQD,EAAOT,MACfW,EAAYF,EAAOR,UACnBW,EAAeH,EAAOP,aACtBW,EAAaJ,EAAOX,OACpBgB,EAAWL,EAAOV,QAEnB,CAACU,IAQJ,OACE,kBAAC,IAAD,CACErH,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,sBACxBE,OAAQR,EACRS,QAASR,EACTS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,mBACdsH,EAAa,CAAEhH,GAAGiH,EAAOjH,GAAKV,OAAOkH,OAAOC,WAAWC,cAAcJ,QAAQC,QAC7EhF,EAAQjC,GACRiC,EAAQjC,GACR4H,EAAQV,GACRW,EAAYV,GACZW,EAAeV,GACfW,EAAaf,GACbgB,EAAWf,KAEbhG,SAAU,WACRb,EAAc,mBACd6B,EAAQ0F,EAAO3H,MACf4H,EAAQD,EAAOT,MACfW,EAAYF,EAAOR,UACnBW,EAAeH,EAAOP,aACtBW,EAAaJ,EAAOX,OACpBgB,EAAWL,EAAOV,OAGpB,yBAAM/F,UAAU,oBACd,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAOtB,EACPoB,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAWS,EAAQT,EAAMC,OAAOH,QAC1CI,OAAO,aAKX,yBAAKR,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAO4F,EACP9F,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAWoG,EAAQpG,EAAMC,OAAOH,QAC1CI,OAAO,aAMX,yBAAKR,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,mBAAmBS,eAAe,aAEpD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAO6F,EACP/F,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAWqG,EAAYrG,EAAMC,OAAOH,QAC9CI,OAAO,aAMX,yBAAKR,UAAU,iBACb,kBAAC,IAAD,CAAkBR,GAAG,sBAAsBS,eAAe,gBAExD,SAAAC,GAAW,OACT,kBAAC,EAAD,CACAC,UAAQ,EACRC,MAAO8F,EACPhG,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAasG,EAAetG,EAAMC,OAAOH,QACnDI,OAAO,aAMb,yBAAKR,UAAU,iBACb,kBAAC,EAAD,CAAaI,MAAO,CAACkG,IAAOR,GAAOQ,IAAOP,IAAO/F,UAAU,mBAAmBoG,OAAQ,CAACC,MAAO,CAACC,MAAUA,OAAW,aAAc,CAACA,MAAUA,MAASC,MAAM,WAAYlG,SAnGjK,SAACuF,EAAOC,GACvBgB,EAAahB,EAAY,IACzBiB,EAAWjB,EAAY,IACvBzE,QAAQC,IAAIuE,a,SCxBZmB,E,4MACJlI,MAAQ,CACN0C,gBAAiB,GACjBC,SAAS,EACTiF,OAAO,CACL3H,KAAK,IAEPkI,gBAAe,EACfC,iBAAgB,EAChBtH,SAAS,G,EAOXT,cAAgB,SAACyC,GACf,EAAK7B,UAAS,SAAAjB,GAAK,sBAChB8C,GAAQ9C,EAAM8C,Q,EAInBuF,aAAe,SAACrF,GACd,EAAK/B,SAAS,CAAC2G,OAAO5E,IAAO,WAC3B,EAAK3C,cAAc,uB,EAIvBiH,Y,uCAAc,WAAOtE,GAAP,SAAAC,EAAA,sEACN,EAAK9C,MAAMmI,aAAa,CAACtF,SADnB,uBAEN,EAAK7C,MAAMoI,eAFL,2C,wDAKdZ,a,uCAAe,WAAO3E,GAAP,SAAAC,EAAA,sEACP,EAAK9C,MAAMqI,aAAa,CAACxF,SADlB,uBAEP,EAAK7C,MAAMoI,eAFJ,2C,wDAKflF,eAAiB,SAACX,GAChBH,QAAQC,IAAI,4BAA6BE,GACzC,EAAKzB,SAAS,CAAEyB,qB,EAGlBY,QAAU,SAACC,GACT,EAAKtC,SAAS,CAAE0B,SAAS,IACzB,EAAKxC,MAAMsI,aAAa,CAAClF,QACxBE,KADD,sBACO,sBAAAR,EAAA,sEACC,EAAK9C,MAAMoI,eADZ,OAEL7E,IAAQC,QAAQ,8EAChB,EAAK1C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,KAH5C,4CAIJkB,OAAM,WACPF,IAAQG,MAAM,gGACd,EAAK5C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,S,EAIrDqB,OAAS,SAACC,GACR,EAAK/C,SAAS,CAAEyB,gBAAgB,M,EAGlCoB,oBAAsB,SAAChD,GACQ,EAAKd,MAA1B0C,gBAEYJ,OAAS,GAC3B,EAAKrB,SAAS,CAACH,a,kEAnDjBZ,KAAKC,MAAMoI,iB,+BAuDH,IAAD,SACkDrI,KAAKF,MAAtD2C,EADD,EACCA,QAAUD,EADX,EACWA,gBAAkB5B,EAD7B,EAC6BA,QAAU8G,EADvC,EACuCA,OACxC3D,EAAe,CACnBvB,kBACAlB,SAAUtB,KAAKmD,gBAEXa,EAAcxB,EAAgBJ,OAAS,EACvC6B,EAAU,CAAC,CACfvD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,iBACxByD,UAAW,OACXC,MAAM,SACL,CACDzD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,iBACxByD,UAAW,OACXC,MAAM,SACL,CACDzD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,qBACxByD,UAAW,WACXC,MAAM,SACN,CACAzD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,kBACxByD,UAAU,QACVE,IAAK,QACLC,OAAQ,SAAC0C,GAAD,OAAWQ,IAAOR,GAAOyB,OAAO,eACxCrE,MAAM,SACL,CACDzD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,gBACxByD,UAAW,MACXE,IAAK,MACLC,OAAQ,SAAC2C,GAAD,OAASO,IAAOP,GAAKwB,OAAO,eACpCrE,MAAM,SACN,CACAzD,MAAO,sEAAgBwD,UAAW,GAAIE,IAAK,GAAIC,OAAQ,gBAAG5D,EAAH,EAAGA,GAAKgI,EAAR,EAAQA,OAAS1I,EAAjB,EAAiBA,KAAOmH,EAAxB,EAAwBA,SAAWH,EAAnC,EAAmCA,MAAQC,EAA3C,EAA2CA,IAAMG,EAAjD,EAAiDA,YAAcF,EAA/D,EAA+DA,KAA/D,OACpD,kBAAC,IAAD,CAASyB,gBAAgB,qBAAMC,kBAAkB,wCAAYC,eAA2B,WAAXH,EAAqCnH,SAAU,SAACuH,GAC5H,IAAIJ,EAASI,EAAU,SAAW,WAClC,EAAK9H,SAAS,CAAC+H,cAAa,IAC5B,EAAK7I,MAAMqI,aAAa,CAACxF,KAAK,CAAC2F,SAAShI,KAAKV,OAAOmH,WAAWH,QAAQC,MAAMG,cAAcF,UAC1F1D,KADD,sBACM,sBAAAR,EAAA,sDACJ,EAAK9C,MAAMoI,eAAe9E,MAAK,WAC7BC,IAAQC,QAAQ,0FAChB,EAAK1C,SAAS,CAAC+H,cAAa,OAH1B,4CAMLpF,OAAM,SAACqF,GACNvF,IAAQG,MAAM,gGACd,EAAK5C,SAAS,CAAC+H,cAAa,MAC3B,SAEH3E,MAAO,QAAU6E,MAAO,OAC5B,CACAtI,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,sBAAuByD,UAAW,GAAIE,IAAK,IAAKC,OAAQ,SAACvB,GAAD,OAC9E,8BACE,kBAAC,IAAD,CAAQwB,QAAS,kBAAM,EAAK6D,aAAarF,IAASyB,KAAK,UAAUC,KAAM,kBAACC,EAAA,EAAD,OAAvE,sCAGLN,MAAM,UAIP,OACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKO,KAAM,IACV,kBAAC,IAAD,CAAMhE,MAAO,4BAAI,kBAACF,EAAA,EAAD,CAAcC,GAAG,sBAC9B,kBAAC,IAAD,CAAS6D,QAAS,kBAAM,EAAKnE,cAAc,mBAAmBwE,KAAK,QAAQH,KAAM,kBAACI,EAAA,EAAD,MAAuBL,KAAK,YAC7G,kBAAC,IAAD,CAASA,KAAK,aACd,kBAAC,IAAD,CAAY3D,QAASA,EAASiE,gBAAiB7E,KAAK4D,oBAAsBkB,UAAU,UAAWpE,MAAM,wEAAiBqE,UAAY,kBAAM,EAAK3B,QAAQZ,IAAmBxB,SAAUhB,KAAK6D,OAAQxD,OAAO,qBAAME,WAAW,gBACrN,kBAAC,IAAD,CAASoE,KAAK,QAAQH,KAAM,kBAACQ,EAAA,EAAD,MAAmBC,UAAWjB,EAAaO,KAAK,SAAS9B,QAASA,KAElG,yBAAKxB,UAAU,WACb,0BAAMiE,MAAO,CAACC,WAAY,IACvBnB,EAAW,sDAAexB,EAAgBJ,OAA/B,mCAAgD,KAGhE,kBAAC,EAAD,CAAWhC,KAAMJ,KAAKF,MAAMmI,eAAgBb,YAAapH,KAAKoH,YAAajH,cAAeH,KAAKG,gBAC/F,kBAAC,EAAD,CAAYC,KAAMJ,KAAKF,MAAMoI,gBAAiBR,OAAQA,EAAQD,aAAczH,KAAKyH,aAActH,cAAeH,KAAKG,gBACnH,kBAAC,IAAD,CAAOiF,OAAQ,SAAAC,GAAM,OAAIA,EAAO5E,IAAI6F,UAAU,MAAOhB,UAAU,EAAMrE,UAAU,sBAAsB8C,aAAcA,EAAcE,QAASA,EAASsB,WAAYvF,KAAKC,MAAMgJ,iB,GA/I9JvH,IAAMC,WA6Jb8D,oBANf,SAAyB3F,GACvB,MAAO,CACLmJ,QAASnJ,EAAMmJ,WAIqB,CAAEZ,iBAAeD,iBAAeE,iBAAeC,kBAAxE9C,CAAwFuC,GC9GxFkB,G,4MAjDbpJ,MAAQ,CACNC,KAAM,I,uDAGE,IAAD,SAC2CC,KAAKC,MAA/CkJ,EADD,EACCA,iBAAkBhJ,EADnB,EACmBA,cAAeC,EADlC,EACkCA,KACjCL,EAASC,KAAKF,MAAdC,KACR,OACE,kBAAC,IAAD,CACEM,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,+BACxBE,OAAQR,EAAeS,QAASR,EAChCS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,uBACdgJ,EAAiB,CAAEpJ,SACnB,EAAKgB,SAAS,CAAEhB,KAAM,OAExBiB,SAAU,WACRb,EAAc,uBACd,EAAKY,SAAS,CAAEhB,KAAM,OAGxB,yBAAMkB,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAOtB,EACPoB,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAW,EAAKR,SAAS,CAAChB,KAAMwB,EAAMC,OAAOH,SACvDI,OAAO,oB,GAvCMC,IAAMC,WCqDpBD,OAAME,MArDG,SAAC,GAA8D,IAA5DwH,EAA2D,EAA3DA,kBAAoBjJ,EAAuC,EAAvCA,cAAeC,EAAwB,EAAxBA,KAAMiJ,EAAkB,EAAlBA,YAAkB,EAE1DtH,mBAAS,IAFiD,mBAE3EhC,EAF2E,KAErEiC,EAFqE,KAWlF,OAPAC,qBAAU,WAC+B,IAApCC,OAAOC,KAAKkH,GAAajH,SAC1BC,QAAQC,IAAI+G,EAAYtJ,MACxBiC,EAAQqH,EAAYtJ,SAErB,CAACsJ,IAGF,kBAAC,IAAD,CACEhJ,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,gCACxBE,OAAQR,EACRS,QAASR,EACTS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,wBACdiJ,EAAkB,CAAE3I,GAAG4I,EAAY5I,GAAKV,SACxCiC,EAAQjC,KAEViB,SAAU,WACRb,EAAc,wBACd6B,EAAQqH,EAAYtJ,QAGtB,yBAAMkB,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACZ,kBAAC,IAAD,CACEC,UAAQ,EACRD,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAWS,EAAQT,EAAMC,OAAOH,QAC1CA,MAAOtB,EACP0B,OAAO,mB,UCrCjB6H,G,4MACJxJ,MAAQ,CACN0C,gBAAiB,GACjBC,SAAS,EACT4G,YAAY,CACVtJ,KAAK,IAEPwJ,qBAAoB,EACpBC,sBAAqB,EACrB5I,SAAS,G,EAMXT,cAAgB,SAACyC,GACf,EAAK7B,UAAS,SAAAjB,GAAK,sBAChB8C,GAAQ9C,EAAM8C,Q,EAInB6G,kBAAoB,SAAC3G,GACnB,EAAK/B,SAAS,CAACsI,YAAYvG,IAAO,WAChC,EAAK3C,cAAc,4B,EAIvBgJ,iB,uCAAmB,WAAOrG,GAAP,SAAAC,EAAA,sEACX,EAAK9C,MAAMyJ,kBAAkB,CAAC5G,SADnB,uBAEX,EAAK7C,MAAM0J,qBAFA,2C,wDAKnBP,kB,uCAAoB,WAAOtG,GAAP,SAAAC,EAAA,sEACZ,EAAK9C,MAAM2J,kBAAkB,CAAC9G,SADlB,uBAEZ,EAAK7C,MAAM0J,qBAFC,2C,wDAIpBxG,eAAiB,SAACX,GAChBH,QAAQC,IAAI,4BAA6BE,GACzC,EAAKzB,SAAS,CAAEyB,qB,EAElBY,QAAU,SAACC,GACT,EAAKtC,SAAS,CAAE0B,SAAS,IACzB,EAAKxC,MAAM4J,oBAAoB,CAACxG,QAC/BE,KADD,sBACO,sBAAAR,EAAA,sEACC,EAAK9C,MAAM0J,qBADZ,OAELnG,IAAQC,QAAQ,8EAChB,EAAK1C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,KAH5C,4CAIJkB,OAAM,WACPF,IAAQG,MAAM,gGACd,EAAK5C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,S,EAIrDqB,OAAS,SAACC,GACR,EAAK/C,SAAS,CAAEyB,gBAAgB,M,EAGlCoB,oBAAsB,SAAChD,GACQ,EAAKd,MAA1B0C,gBAEYJ,OAAS,GAC3B,EAAKrB,SAAS,CAACH,a,kEAjDjBZ,KAAKC,MAAM0J,uB,+BAqDH,IAAD,SACoD3J,KAAKF,MAAzD2C,EADA,EACAA,QAASD,EADT,EACSA,gBAAkB5B,EAD3B,EAC2BA,QAAUyI,EADrC,EACqCA,YACtCtF,EAAe,CACnBvB,kBACAlB,SAAUtB,KAAKmD,gBAEXa,EAAcxB,EAAgBJ,OAAS,EACvC6B,EAAU,CAAC,CACfvD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,iBACxByD,UAAW,OACXC,MAAM,SACN,CACAzD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,sBAAuByD,UAAW,GAAIE,IAAK,IAAKC,OAAQ,SAACvB,GAAD,OAC9E,8BACE,kBAAC,IAAD,CAAQwB,QAAS,kBAAM,EAAKmF,kBAAkB3G,IAAQyB,KAAK,UAAUC,KAAM,kBAACC,EAAA,EAAD,OAA3E,sCAGLN,MAAM,UAGP,OACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKO,KAAM,IACV,kBAAC,IAAD,CAAMhE,MAAO,4BAAI,kBAACF,EAAA,EAAD,CAAcC,GAAG,4BAC9B,kBAAC,IAAD,CAAQ6D,QAAS,kBAAM,EAAKnE,cAAc,wBAAwBwE,KAAK,QAAQH,KAAM,kBAACI,EAAA,EAAD,MAAuBL,KAAK,YACjH,kBAAC,IAAD,CAASA,KAAK,aACd,kBAAC,IAAD,CAAY3D,QAASA,EAASiE,gBAAiB7E,KAAK4D,oBAAsBkB,UAAU,UAAWpE,MAAM,wEAAiBqE,UAAY,kBAAM,EAAK3B,QAAQZ,IAAmBxB,SAAUhB,KAAK6D,OAAQxD,OAAO,qBAAME,WAAW,gBACrN,kBAAC,IAAD,CAASoE,KAAK,QAAQH,KAAM,kBAACQ,EAAA,EAAD,MAAmBC,UAAWjB,EAAaO,KAAK,SAAS9B,QAASA,KAElG,yBAAKxB,UAAU,WACb,0BAAMiE,MAAO,CAACC,WAAY,IACvBnB,EAAW,sDAAexB,EAAgBJ,OAA/B,mCAAgD,KAGhE,kBAAC,GAAD,CAAgBhC,KAAMJ,KAAKF,MAAMyJ,oBAAqBJ,iBAAkBnJ,KAAKmJ,iBAAkBhJ,cAAeH,KAAKG,gBACnH,kBAAC,GAAD,CAAiBC,KAAMJ,KAAKF,MAAM0J,qBAAsBH,YAAaA,EAAaD,kBAAmBpJ,KAAKoJ,kBAAmBjJ,cAAeH,KAAKG,gBACjJ,kBAAC,IAAD,CAAOiF,OAAQ,SAAAC,GAAM,OAAIA,EAAO5E,IAAKqJ,WAAY,CAACC,SAAS,iBAAmBzE,UAAU,EAAMrE,UAAU,sBAAsB8C,aAAcA,EAAcE,QAASA,EAASsB,WAAYvF,KAAKC,MAAM+J,uB,GArGjLtI,IAAMC,WAmHnB8D,oBANf,SAAyB3F,GACvB,MAAO,CACLkK,cAAelK,EAAMkK,iBAIe,CAAEL,wBAAqBD,uBAAoBE,uBAAoBC,0BAAxFpE,CAA+G6D,IClE/GW,G,kDArDb,WAAYhK,GAAQ,IAAD,8BACjB,gBAEKH,MAAQ,CACXC,KAAM,IAJS,E,qDAQT,IAAD,SACqCC,KAAKC,MAAzCiK,EADD,EACCA,WAAY/J,EADb,EACaA,cAAeC,EAD5B,EAC4BA,KAC3BL,EAASC,KAAKF,MAAdC,KACR,OACE,kBAAC,IAAD,CACEM,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,mBACxBE,OAAQR,EAAeS,QAASR,EAChCS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,iBACd+J,EAAW,CAAEnK,SACb,EAAKgB,SAAS,CAAEhB,KAAM,OAExBiB,SAAU,WACRb,EAAc,iBACd,EAAKY,SAAS,CAAEhB,KAAM,OAGxB,yBAAMkB,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACV,kBAAC,IAAD,CACAC,UAAQ,EACRC,MAAOtB,EACPoB,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAW,EAAKR,SAAS,CAAChB,KAAMwB,EAAMC,OAAOH,SACvDI,OAAO,oB,GA1CAC,IAAMC,WCqDdD,OAAME,MArDH,SAAC,GAAiD,IAA/CuI,EAA8C,EAA9CA,YAAahK,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,KAAMgK,EAAY,EAAZA,MAAY,EAEvCrI,mBAAS,IAF8B,mBAExDhC,EAFwD,KAElDiC,EAFkD,KAW/D,OAPAC,qBAAU,WACyB,IAA9BC,OAAOC,KAAKiI,GAAOhI,SACpBC,QAAQC,IAAI8H,EAAMrK,MAClBiC,EAAQoI,EAAMrK,SAEf,CAACqK,IAGF,kBAAC,IAAD,CACE/J,OAAQ,kBAACC,EAAA,EAAD,MACRC,WAAa,kBAACC,EAAA,EAAD,CAAcC,GAAG,qBAC9BC,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,oBACxBE,OAAQR,EACRS,QAASR,EACTS,UAAU,EACVC,KAAM,WACS,KAATf,IAEJI,EAAc,kBACdgK,EAAY,CAAE1J,GAAG2J,EAAM3J,GAAKV,SAC5BiC,EAAQjC,KAEViB,SAAU,WACRb,EAAc,kBACd6B,EAAQoI,EAAMrK,QAGhB,yBAAMkB,UAAU,oBACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACf,kBAAC,IAAD,CAAkBR,GAAG,eAAeS,eAAe,SAEhD,SAAAC,GAAW,OACZ,kBAAC,IAAD,CACEC,UAAQ,EACRD,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAWS,EAAQT,EAAMC,OAAOH,QAC1CA,MAAOtB,EACP0B,OAAO,mB,UCrCjB4I,G,4MAEJvK,MAAQ,CACN0C,gBAAiB,GACjBC,SAAS,EACT2H,MAAM,CACJrK,KAAK,IAEPuK,eAAc,EACdC,gBAAe,EACf3J,SAAS,G,EAOXT,cAAgB,SAACyC,GACf,EAAK7B,UAAS,SAAAjB,GAAK,sBAChB8C,GAAQ9C,EAAM8C,Q,EAInB4H,YAAc,SAAC1H,GACb,EAAK/B,SAAS,CAACqJ,MAAMtH,IAAO,WAC1B,EAAK3C,cAAc,sB,EAIvB+J,W,uCAAa,WAAOpH,GAAP,SAAAC,EAAA,sEACL,EAAK9C,MAAMwK,YAAY,CAAC3H,SADnB,uBAEL,EAAK7C,MAAMyK,cAFN,2C,wDAKbP,Y,uCAAc,WAAOrH,GAAP,SAAAC,EAAA,sEACN,EAAK9C,MAAM0K,YAAY,CAAC7H,SADlB,uBAEN,EAAK7C,MAAMyK,cAFL,2C,wDAKdvH,eAAiB,SAACX,GAChBH,QAAQC,IAAI,4BAA6BE,GACzC,EAAKzB,SAAS,CAAEyB,qB,EAGlBqB,OAAS,SAACC,GACR,EAAK/C,SAAS,CAAEyB,gBAAgB,M,EAGlCY,QAAU,SAACC,GACT,EAAKtC,SAAS,CAAE0B,SAAS,IACzB,EAAKxC,MAAM2K,YAAY,CAACvH,QACvBE,KADD,sBACO,sBAAAR,EAAA,sEACC,EAAK9C,MAAMyK,cADZ,OAELlH,IAAQC,QAAQ,8EAChB,EAAK1C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,KAH5C,4CAIJkB,OAAM,WACPF,IAAQG,MAAM,gGACd,EAAK5C,SAAS,CAAE0B,SAAS,EAAQD,gBAAgB,S,EAIrDoB,oBAAsB,SAAChD,GACQ,EAAKd,MAA1B0C,gBAEYJ,OAAS,GAC3B,EAAKrB,SAAS,CAACH,a,kEAnDjBZ,KAAKC,MAAMyK,gB,+BAuDH,IAAD,OAEDzG,EAAU,CAAC,CACfvD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,iBACxByD,UAAW,OACXC,MAAM,SACN,CACAzD,MAAO,kBAACF,EAAA,EAAD,CAAcC,GAAG,sBAAuByD,UAAW,GAAIE,IAAK,IAAKC,OAAQ,SAACvB,GAAD,OAC9E,8BACE,kBAAC,IAAD,CAAQwB,QAAS,kBAAM,EAAKkG,YAAY1H,IAAQyB,KAAK,UAAUC,KAAM,kBAACC,EAAA,EAAD,OAArE,sCAGLN,MAAM,UAZA,EAe+CnE,KAAKF,MAAnD2C,EAfD,EAeCA,QAASD,EAfV,EAeUA,gBAAkB4H,EAf5B,EAe4BA,MAAOxJ,EAfnC,EAemCA,QACpCmD,EAAe,CACnBvB,kBACAlB,SAAUtB,KAAKmD,gBAEXa,EAAcxB,EAAgBJ,OAAS,EAC7C,OACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKsC,KAAM,IACV,kBAAC,IAAD,CAAMhE,MAAO,4BAAI,kBAACF,EAAA,EAAD,CAAcC,GAAG,qBAC9B,kBAAC,IAAD,CAAS6D,QAAS,kBAAM,EAAKnE,cAAc,kBAAkBwE,KAAK,QAAQH,KAAM,kBAACI,EAAA,EAAD,MAAuBL,KAAK,YAC5G,kBAAC,IAAD,CAASA,KAAK,aACd,kBAAC,IAAD,CAAY3D,QAASA,EAASiE,gBAAiB7E,KAAK4D,oBAAsBkB,UAAU,UAAWpE,MAAM,wEAAiBqE,UAAY,kBAAM,EAAK3B,QAAQZ,IAAmBxB,SAAUhB,KAAK6D,OAAQxD,OAAO,qBAAME,WAAW,gBACrN,kBAAC,IAAD,CAASoE,KAAK,QAAQH,KAAM,kBAACQ,EAAA,EAAD,MAAmBC,UAAWjB,EAAaO,KAAK,SAAS9B,QAASA,KAElG,yBAAKxB,UAAU,WACb,0BAAMiE,MAAO,CAACC,WAAY,IACvBnB,EAAW,sDAAexB,EAAgBJ,OAA/B,mCAAgD,KAGhE,kBAAC,GAAD,CAAUhC,KAAMJ,KAAKF,MAAMwK,cAAeJ,WAAYlK,KAAKkK,WAAY/J,cAAeH,KAAKG,gBAC3F,kBAAC,GAAD,CAAWC,KAAMJ,KAAKF,MAAMyK,eAAgBH,MAAOA,EAAOD,YAAanK,KAAKmK,YAAahK,cAAeH,KAAKG,gBAC7G,kBAAC,IAAD,CAAOiF,OAAQ,SAAAC,GAAM,OAAIA,EAAO5E,IAAIoK,IAAI,MAAMvF,UAAU,EAAMrE,UAAU,sBAAsB8C,aAAcA,EAAcE,QAASA,EAASsB,WAAYvF,KAAKC,MAAM6K,gB,GA1GxJpJ,IAAMC,WAwHZ8D,oBANf,SAAyB3F,GACvB,MAAO,CACLgL,OAAQhL,EAAMgL,UAIsB,CAAEJ,iBAAcD,iBAAcE,iBAAcC,kBAArEnF,CAAoF4E,IC/GpFU,UAVE,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAI,UAAKD,EAAME,IAAX,WAAyBC,UAAW5I,IAC/C,kBAAC,IAAD,CAAO0I,KAAI,UAAKD,EAAME,IAAX,WAAyBC,UAAWd,KAC/C,kBAAC,IAAD,CAAOY,KAAI,UAAKD,EAAME,IAAX,aAA2BC,UAAWrF,IACjD,kBAAC,IAAD,CAAOmF,KAAI,UAAKD,EAAME,IAAX,YAA0BC,UAAWnD,KAChD,kBAAC,IAAD,CAAOiD,KAAI,UAAKD,EAAME,IAAX,kBAAgCC,UAAW7B","file":"static/js/11.93977fb0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass AddCity extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      name :''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onAddCity, onToggleModal, open } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"city.addCity\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addCityState\");\r\n          onAddCity({ name });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addCityState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCity;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst EditCity = ({ onSaveCity, onToggleModal, open, city }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(city).length !== 0){\r\n        console.log(city.name)\r\n        setName(city.name)\r\n      }\r\n    }, [city])\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"city.saveCity\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editCityState\");\r\n          onSaveCity({ id:city.id , name });\r\n          setName(name)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editCityState')\r\n          setName(city.name)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n              <Input\r\n                required\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                value={name}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditCity);\r\n","import React from \"react\";\r\nimport { Button, Card, Table , Col , Row , message , Popconfirm , Divider} from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { PlusCircleFilled , DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport AddCity from \"components/city/AddCity\";\r\nimport EditCity from \"components/city/EditCity\";\r\nimport { fetchCities , CreateCity , UpdateCity , DeleteCity } from \"../../../appRedux/actions/Cities\";\r\n\r\n\r\nclass Cities extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    city:{},\r\n    addCityState:false,\r\n    editCityState:false,\r\n    visible: false,\r\n  };\r\n \r\n  componentDidMount(){\r\n    this.props.fetchCities()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditCity = (data) => {\r\n    this.setState({city:data}, ()=>{\r\n      this.onToggleModal(\"editCityState\");\r\n    })\r\n  };\r\n\r\n  onAddCity = async (data) => {\r\n    await this.props.CreateCity({data})\r\n    await this.props.fetchCities()\r\n  };\r\n\r\n  onSaveCity = async (data) => {\r\n    await this.props.UpdateCity({data})\r\n    await this.props.fetchCities()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteCity({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchCities()\r\n      message.success('تم حذف المدينة');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n\r\n  render() {\r\n    const {loading, selectedRowKeys , city  , visible} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditCity(data)}  type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n    \r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Cities\"/></h1>}>\r\n            <Button onClick={() => this.onToggleModal('addCityState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddCity open={this.state.addCityState} onAddCity={this.onAddCity} onToggleModal={this.onToggleModal} />\r\n          <EditCity open={this.state.editCityState} city={city} onSaveCity={this.onSaveCity} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id} bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.cities}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cities: state.cities,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,{ fetchCities , CreateCity , UpdateCity , DeleteCity } )(Cities)\r\n\r\n\r\n","import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass AddSubject extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      name :''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onAddSubject, onToggleModal, open } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"subject.addSubject\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addSubjectState\");\r\n          onAddSubject({ name });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addSubjectState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddSubject;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst EditSubject = ({ onSaveSubject, onToggleModal, open, subject }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(subject).length !== 0){\r\n        console.log(subject.name)\r\n        setName(subject.name)\r\n      }\r\n    }, [subject])\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"subject.saveSubject\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editSubjectState\");\r\n          onSaveSubject({ id:subject.id , name });\r\n          setName(name)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editSubjectState')\r\n          setName(subject.name)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n              <Input\r\n                required\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                value={name}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditSubject);\r\n","import React from \"react\";\r\nimport {Button, Card, Table  , Row , Col , Popconfirm , message , Divider } from \"antd\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport {PlusCircleFilled, DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport { fetchSubjects , CreateSubject , UpdateSubject , DeleteSubject } from \"../../../appRedux/actions/Subjects\";\r\nimport AddSubject from \"components/subject/AddSubject\";\r\nimport EditSubject from \"components/subject/EditSubject\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Subjects extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    subject:{\r\n      name:''\r\n    },\r\n    addSubjectState:false,\r\n    editSubjectState:false,\r\n    visible: false,\r\n  };\r\n \r\n  componentDidMount(){\r\n    this.props.fetchSubjects()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditSubject = (data) => {\r\n    this.setState({subject:data}, ()=>{\r\n      this.onToggleModal(\"editSubjectState\");\r\n    })\r\n  };\r\n\r\n  onAddSubject = async (data) => {\r\n    await this.props.CreateSubject({data})\r\n    await this.props.fetchSubjects()\r\n  };\r\n\r\n  onSaveSubject = async (data) => {\r\n    await this.props.UpdateSubject({data})\r\n    await this.props.fetchSubjects()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteSubject({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchSubjects()\r\n      message.success('تم حذف المادة');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n\r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {loading, selectedRowKeys , visible , subject} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditSubject(data)} type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n\r\n    \r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Materials\"/></h1>}>\r\n            <Button  onClick={() => this.onToggleModal('addSubjectState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddSubject open={this.state.addSubjectState} onAddSubject={this.onAddSubject} onToggleModal={this.onToggleModal} />\r\n          <EditSubject open={this.state.editSubjectState} subject={subject} onSaveSubject={this.onSaveSubject} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id} direction=\"rtl\"  bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.subjects}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    subjects: state.subjects,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchSubjects , CreateSubject , UpdateSubject , DeleteSubject })(Subjects)\r\n","import React from \"react\";\r\nimport { Input, Modal , DatePicker } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport moment from \"moment\";\r\n\r\nconst {TextArea} = Input;\r\nconst RangePicker = DatePicker.RangePicker;\r\n\r\nclass AddCoupon extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      name :'',\r\n      code:'',\r\n      discount:'',\r\n      description:'',\r\n      start:'',\r\n      end:''\r\n    }\r\n  }\r\n\r\n  onChange = (dates, dateStrings) => {\r\n    this.setState({ start:  dateStrings[0] , end:  dateStrings[1] })\r\n    console.log(dates);\r\n  }\r\n\r\n  render() {\r\n    const { onAddCoupon, onToggleModal, open } = this.props;\r\n    const { name , code , discount , start , end , description } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"coupon.addCoupon\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '' || code === '' || discount === '' || start === '' || end === '' || description === '')\r\n            return;\r\n          onToggleModal(\"addCouponState\");\r\n          onAddCoupon({ name , code , discount , start , end , description });\r\n          this.setState({ name: '' , code: '' , discount: '' , start: '' , end: '' , description:'' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addCouponState\")\r\n          this.setState({ name: '' , code: '' , discount: '' , start: '' , end: '' , description:'' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.code\" defaultMessage=\"code\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={code}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({code: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.discount\" defaultMessage=\"discount\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={discount}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({discount: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n              <FormattedMessage id=\"columns.description\" defaultMessage=\"description\">\r\n              {\r\n                placeholder => (\r\n                  <TextArea\r\n                  required\r\n                  value={description}\r\n                  placeholder={placeholder}\r\n                  onChange={(event) => this.setState({description: event.target.value})}\r\n                  margin=\"none\"/>\r\n                  )\r\n                }\r\n            </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.discount\" defaultMessage=\"discount\">\r\n             {\r\n               placeholder => (\r\n                <RangePicker  className=\"gx-mb-3 gx-w-100\" ranges={{Today: [moment(), moment()], 'This Month': [moment(), moment().endOf('month')]}} onChange={this.onChange} />\r\n               )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCoupon;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal , DatePicker } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport moment from \"moment\";\r\n\r\nconst RangePicker = DatePicker.RangePicker;\r\nconst {TextArea} = Input;\r\n\r\n\r\nconst EditCoupon = ({ onSaveCoupon, onToggleModal, open, coupon }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n    const [code, setCode] = useState('')\r\n    const [discount, setDiscount] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [start, setStartDate] = useState('')\r\n    const [end, setEndDate] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(coupon).length !== 0){\r\n        setName(coupon.name)\r\n        setCode(coupon.code)\r\n        setDiscount(coupon.discount)\r\n        setDescription(coupon.description)\r\n        setStartDate(coupon.start)\r\n        setEndDate(coupon.end)\r\n      }\r\n    }, [coupon])\r\n\r\n    const onChange = (dates, dateStrings) => {\r\n      setStartDate(dateStrings[0])\r\n      setEndDate(dateStrings[1])\r\n      console.log(dates);\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"coupon.saveCoupon\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editCouponState\");\r\n          onSaveCoupon({ id:coupon.id , name , code , discount , description , start , end });\r\n          setName(name)\r\n          setName(name)\r\n          setCode(code)\r\n          setDiscount(discount)\r\n          setDescription(description)\r\n          setStartDate(start)\r\n          setEndDate(end)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editCouponState')\r\n          setName(coupon.name)\r\n          setCode(coupon.code)\r\n          setDiscount(coupon.discount)\r\n          setDescription(coupon.description)\r\n          setStartDate(coupon.start)\r\n          setEndDate(coupon.end)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n          <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.code\" defaultMessage=\"code\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={code}\r\n                placeholder={placeholder}\r\n                onChange={(event) => setCode(event.target.value)}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.discount\" defaultMessage=\"discount\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={discount}\r\n                placeholder={placeholder}\r\n                onChange={(event) => setDiscount(event.target.value)}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n              <FormattedMessage id=\"columns.description\" defaultMessage=\"description\">\r\n              {\r\n                placeholder => (\r\n                  <TextArea\r\n                  required\r\n                  value={description}\r\n                  placeholder={placeholder}\r\n                  onChange={(event) =>   setDescription(event.target.value)}\r\n                  margin=\"none\"/>\r\n                  )\r\n                }\r\n            </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n              <RangePicker value={[moment(start),moment(end)]} className=\"gx-mb-3 gx-w-100\" ranges={{Today: [moment(), moment()], 'This Month': [moment(), moment().endOf('month')]}} onChange={onChange} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditCoupon);\r\n","import React from \"react\";\r\nimport { Button, Card, Table , Row , Col , Divider , Popconfirm , message , Switch } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport { PlusCircleFilled, DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport AddCoupon from \"components/coupon/AddCoupon\";\r\nimport EditCoupon from \"components/coupon/EditCoupon\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { fetchCoupons , CreateCoupon , UpdateCoupon , DeleteCoupon } from \"../../../appRedux/actions/Coupons\";\r\n\r\nclass Coupons extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    coupon:{\r\n      name:''\r\n    },\r\n    addCouponState:false,\r\n    editCouponState:false,\r\n    visible: false,\r\n  };\r\n\r\n  componentDidMount(){\r\n    this.props.fetchCoupons()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditCoupon = (data) => {\r\n    this.setState({coupon:data}, ()=>{\r\n      this.onToggleModal(\"editCouponState\");\r\n    })\r\n  };\r\n\r\n  onAddCoupon = async (data) => {\r\n    await this.props.CreateCoupon({data})\r\n    await this.props.fetchCoupons()\r\n  };\r\n\r\n  onSaveCoupon = async (data) => {\r\n    await this.props.UpdateCoupon({data})\r\n    await this.props.fetchCoupons()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteCoupon({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchCoupons()\r\n      message.success('تم حذف الكوبون');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n  \r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { loading , selectedRowKeys , visible , coupon } = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    }, {\r\n      title: <IntlMessages id=\"columns.code\"/>,\r\n      dataIndex: 'code',\r\n      align:'right'\r\n    }, {\r\n      title: <IntlMessages id=\"columns.discount\"/>,\r\n      dataIndex: 'discount',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.start\"/>,\r\n      dataIndex:'start',\r\n      key: 'start',\r\n      render: (start) => moment(start).format('DD-MM-YYYY'),\r\n      align:'right'\r\n    }, {\r\n      title: <IntlMessages id=\"columns.end\"/>,\r\n      dataIndex: 'end',\r\n      key: 'end' ,\r\n      render: (end) => moment(end).format('DD-MM-YYYY'),\r\n      align:'right'\r\n    },{\r\n      title: 'تعديل الحالة', dataIndex: '', key: '', render: ({ id , status , name , discount , start , end , description , code }) => (\r\n         <Switch  checkedChildren=\"نشط\" unCheckedChildren=\"غير نشط\"   defaultChecked={status === \"active\" ? true : false}  onChange={(checked) => {\r\n          let status = checked ? \"active\" : \"inactive\"\r\n          this.setState({loadingTable:true}); \r\n          this.props.UpdateCoupon({data:{status , id , name , discount , start , end , description , code }})\r\n          .then(async()=> {\r\n            this.props.fetchCoupons().then(()=>{\r\n              message.success('تم التفعيل بنجاح')\r\n              this.setState({loadingTable:false}); \r\n            })\r\n          })\r\n          .catch((err)=> {\r\n            message.error('عطل أثناء التعديل')\r\n            this.setState({loadingTable:false}); \r\n          }, 2000);\r\n         } } />\r\n      ) , align :'right' , width :\"500\"\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditCoupon(data)}   type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n\r\n    \r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Coupons\"/></h1>}>\r\n            <Button  onClick={() => this.onToggleModal('addCouponState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddCoupon open={this.state.addCouponState} onAddCoupon={this.onAddCoupon} onToggleModal={this.onToggleModal} />\r\n          <EditCoupon open={this.state.editCouponState} coupon={coupon} onSaveCoupon={this.onSaveCoupon} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id} direction=\"rtl\"  bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.coupons}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    coupons: state.coupons,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchCoupons , CreateCoupon , UpdateCoupon , DeleteCoupon })(Coupons)\r\n","import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass AddNationality extends React.Component {\r\n\r\n  state = {\r\n    name :''\r\n  }\r\n\r\n  render() {\r\n    const { onAddNationality, onToggleModal, open } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"nationality.addNationality\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addNationalityState\");\r\n          onAddNationality({ name });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addNationalityState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddNationality;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst EditNationality = ({ onSaveNationality , onToggleModal, open, nationality }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(nationality).length !== 0){\r\n        console.log(nationality.name)\r\n        setName(nationality.name)\r\n      }\r\n    }, [nationality])\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"nationality.saveNationality\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editNationalityState\");\r\n          onSaveNationality({ id:nationality.id , name });\r\n          setName(name)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editNationalityState')\r\n          setName(nationality.name)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n              <Input\r\n                required\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                value={name}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditNationality);\r\n","import React from \"react\";\r\nimport {Button, Card, Table  , Row , Col , message , Divider , Popconfirm} from \"antd\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport AddNationality from \"components/nationality/AddNationality\";\r\nimport EditNationality from \"components/nationality/EditNationality\";\r\nimport {PlusCircleFilled, DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport { fetchNationalities , CreateNationality , UpdateNationality , DeleteNationalities } from \"../../../appRedux/actions/Nationalities\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nclass Nationalities extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    nationality:{\r\n      name:''\r\n    },\r\n    addNationalityState:false,\r\n    editNationalityState:false,\r\n    visible: false,\r\n  };\r\n  componentDidMount(){\r\n    this.props.fetchNationalities()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditNationality = (data) => {\r\n    this.setState({nationality:data}, ()=>{\r\n      this.onToggleModal(\"editNationalityState\");\r\n    })\r\n  };\r\n\r\n  onAddNationality = async (data) => {\r\n    await this.props.CreateNationality({data})\r\n    await this.props.fetchNationalities()\r\n  };\r\n\r\n  onSaveNationality = async (data) => {\r\n    await this.props.UpdateNationality({data})\r\n    await this.props.fetchNationalities()\r\n  };\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteNationalities({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchNationalities()\r\n      message.success('تم حذف الجنسية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n  \r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {loading, selectedRowKeys , visible , nationality} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditNationality(data)}  type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n\r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Nationalities\"/></h1>}>\r\n            <Button onClick={() => this.onToggleModal('addNationalityState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddNationality open={this.state.addNationalityState} onAddNationality={this.onAddNationality} onToggleModal={this.onToggleModal} />\r\n          <EditNationality open={this.state.editNationalityState} nationality={nationality} onSaveNationality={this.onSaveNationality} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id}  pagination={{position:'bottom center'}}  bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.nationalities}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    nationalities: state.nationalities,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchNationalities , CreateNationality , UpdateNationality , DeleteNationalities })(Nationalities)\r\n","import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass AddLevel extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      name :''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onAddLevel, onToggleModal, open } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"level.addLevel\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addLevelState\");\r\n          onAddLevel({ name });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addLevelState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddLevel;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst EditLevel = ({ onSaveLevel, onToggleModal, open, level }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(level).length !== 0){\r\n        console.log(level.name)\r\n        setName(level.name)\r\n      }\r\n    }, [level])\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"level.saveLevel\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editLevelState\");\r\n          onSaveLevel({ id:level.id , name });\r\n          setName(name)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editLevelState')\r\n          setName(level.name)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n              <Input\r\n                required\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                value={name}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditLevel);\r\n","import React from \"react\";\r\nimport { Button, Card, Table , Col , Row , Popconfirm , message , Divider } from \"antd\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport {PlusCircleFilled, DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport AddLevel from \"components/level/AddLevel\";\r\nimport EditLevel from \"components/level/EditLevel\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchLevels , CreateLevel , UpdateLevel , DeleteLevel } from \"../../../appRedux/actions/Levels\";\r\n\r\n\r\n\r\nclass Levels extends React.Component {\r\n\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    level:{\r\n      name:''\r\n    },\r\n    addLevelState:false,\r\n    editLevelState:false,\r\n    visible: false,\r\n  };\r\n  \r\n  componentDidMount(){\r\n    this.props.fetchLevels()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditLevel = (data) => {\r\n    this.setState({level:data}, ()=>{\r\n      this.onToggleModal(\"editLevelState\");\r\n    })\r\n  };\r\n\r\n  onAddLevel = async (data) => {\r\n    await this.props.CreateLevel({data})\r\n    await this.props.fetchLevels()\r\n  };\r\n\r\n  onSaveLevel = async (data) => {\r\n    await this.props.UpdateLevel({data})\r\n    await this.props.fetchLevels()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteLevel({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchLevels()\r\n      message.success('تم حذف المستوى');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  render() {\r\n\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditLevel(data)}  type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n    \r\n    const { loading, selectedRowKeys , level, visible } = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Levels\"/></h1>}>\r\n            <Button  onClick={() => this.onToggleModal('addLevelState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddLevel open={this.state.addLevelState} onAddLevel={this.onAddLevel} onToggleModal={this.onToggleModal} />\r\n          <EditLevel open={this.state.editLevelState} level={level} onSaveLevel={this.onSaveLevel} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id} dir=\"rtl\" bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.levels}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    levels: state.levels,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchLevels , CreateLevel , UpdateLevel , DeleteLevel })(Levels)\r\n\r\n","import React from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\n\r\nimport Cities from \"./Cities\";\r\nimport Subjects from \"./Subjects\";\r\nimport Coupons from \"./Coupons\";\r\nimport Nationalities from \"./Nationalities\";\r\nimport Levels from \"./Levels\";\r\n\r\n\r\nconst Settings = ({match}) => (\r\n  <Switch>\r\n    <Route path={`${match.url}/cities`} component={Cities}/>\r\n    <Route path={`${match.url}/levels`} component={Levels}/>\r\n    <Route path={`${match.url}/subjects`} component={Subjects}/>\r\n    <Route path={`${match.url}/coupons`} component={Coupons}/>\r\n    <Route path={`${match.url}/nationalities`} component={Nationalities}/>\r\n  </Switch>\r\n);\r\n\r\nexport default Settings;\r\n"],"sourceRoot":""}