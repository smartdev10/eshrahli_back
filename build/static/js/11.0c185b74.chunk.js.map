{"version":3,"sources":["components/page/AddPage/index.js","components/page/EditPage/index.js","routes/cms/index.js"],"names":["AddPage","state","name","slug","editorState","onEditorStateChange","setState","this","props","onAddPage","onToggleModal","open","width","okText","SaveFilled","cancelText","IntlMessages","id","title","toggle","visible","closable","onOk","content","draftToHtml","convertToRaw","getCurrentContent","onCancel","className","defaultMessage","placeholder","required","value","onChange","event","target","margin","textAlignment","toolbarClassName","wrapperClassName","editorClassName","React","Component","EditPage","onSavePage","page","count","useState","setEditorState","contentState","setContentState","pageName","setName","useEffect","blocksFromHtml","htmlToDraft","contentBlocks","entityMap","ContentState","createFromBlockArray","editorState1","EditorState","createWithContent","console","log","body","Pages","selectedRowKeys","loading","addPageState","editPageState","modal","onEditPage","data","a","CreatePage","message","success","fetchPages","UpdatePage","onSelectChange","confirm","ids","DeletePages","then","catch","error","handleVisibleChange","length","cancel","e","rowSelection","hasSelected","columns","dataIndex","align","key","render","onClick","type","icon","EditOutlined","span","size","PlusCircleFilled","onVisibleChange","onConfirm","DeleteOutlined","disabled","locale","emptyText","rowKey","record","dir","bordered","dataSource","pages","connect"],"mappings":"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","file":"static/js/11.0c185b74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport { convertToRaw } from 'draft-js';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n\r\nclass AddPage extends React.Component {\r\n  \r\n  state = {\r\n    name :'',\r\n    slug:'',\r\n    editorState:''\r\n  }\r\n\r\n  onEditorStateChange = (editorState) => {\r\n    this.setState({editorState})\r\n  };\r\n\r\n\r\n  render() {\r\n    const { onAddPage, onToggleModal, open } = this.props;\r\n    const { name , editorState , slug } = this.state;\r\n    return (\r\n      <Modal\r\n        width={'80%'}\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"page.addPage\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addPageState\");\r\n          onAddPage({ name , slug , content:draftToHtml(convertToRaw(editorState.getCurrentContent())) });\r\n          this.setState({ name: '' , slug:'' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addPageState\")\r\n          this.setState({ name: '' , slug:'' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n              <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n              {\r\n                placeholder => (\r\n                  <Input\r\n                  required\r\n                  value={name}\r\n                  placeholder={placeholder}\r\n                  onChange={(event) => this.setState({name: event.target.value})}\r\n                  margin=\"none\"/>\r\n                  )\r\n                }\r\n            </FormattedMessage>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n                 <Input\r\n                  required\r\n                  value={slug}\r\n                  placeholder='slug'\r\n                  onChange={(event) => this.setState({slug: event.target.value})}\r\n                  margin=\"none\"/>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n              <Editor\r\n                textAlignment=\"right\"\r\n                toolbarClassName=\"toolbarClassName\"\r\n                wrapperClassName=\"wrapperClassName\"\r\n                editorClassName=\"editorClassName\"\r\n                onEditorStateChange={this.onEditorStateChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPage;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { EditorState, ContentState , convertToRaw } from 'draft-js';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n\r\n\r\nconst EditPage = ({ onSavePage, onToggleModal, open, id , name , content , page , count }) => {\r\n  \r\n    const [editorState, setEditorState] = useState(null)\r\n    const [contentState, setContentState] = useState(null)\r\n    const [pageName, setName] = useState('')\r\n\r\n\r\n    const onEditorStateChange = (editorState) => {\r\n      setEditorState(editorState)\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n      if(content){\r\n        const blocksFromHtml = htmlToDraft(content);\r\n        const { contentBlocks, entityMap } = blocksFromHtml;\r\n        const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\r\n        const editorState1 = EditorState.createWithContent(contentState);\r\n        setEditorState(editorState1)\r\n        setContentState(contentState)\r\n        setName(name)\r\n      }\r\n    }, [content , name , page , count])\r\n\r\n    return (\r\n      <Modal\r\n        width={'80%'}\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"page.savePage\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          console.log(id)\r\n          if (pageName === '')\r\n            return;\r\n          onToggleModal(\"editPageState\");\r\n          let body = content\r\n          if(editorState){\r\n            body = draftToHtml(convertToRaw(editorState.getCurrentContent()))\r\n          }\r\n          onSavePage({ id:id , name:pageName  , content:body });\r\n          setName(name)\r\n          setContentState(null)\r\n          setEditorState(null)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editPageState')\r\n          setName(name)\r\n          setContentState(null)\r\n          setEditorState(null)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n              <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n              {\r\n                placeholder => (\r\n                <Input\r\n                  required\r\n                  placeholder={placeholder}\r\n                  onChange={(event) => setName(event.target.value)}\r\n                  value={pageName}\r\n                  margin=\"none\"/>\r\n                  )\r\n                }\r\n            </FormattedMessage>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n              <Editor\r\n                editorState={editorState}\r\n                contentState={contentState}\r\n                textAlignment=\"right\"\r\n                toolbarClassName=\"toolbarClassName\"\r\n                wrapperClassName=\"wrapperClassName\"\r\n                editorClassName=\"editorClassName\"\r\n                onEditorStateChange={onEditorStateChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default EditPage;\r\n","import React from \"react\";\r\nimport { Button, Card, Table , Col , Row , message , Divider , Popconfirm , Badge } from \"antd\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport AddPage from \"components/page/AddPage\";\r\nimport EditPage from \"components/page/EditPage\";\r\nimport { PlusCircleFilled , DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport { fetchPages , CreatePage , UpdatePage , DeletePages } from \"appRedux/actions/Pages\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Pages extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    page:{},\r\n    id:'',\r\n    name:'',\r\n    count:0,\r\n    content:'',\r\n    addPageState:false,\r\n    editPageState:false,\r\n    visible: false,\r\n  };\r\n  \r\n  componentDidMount(){\r\n    this.props.fetchPages()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditPage = (data) => {\r\n    this.setState({ id:data.id, name:data.name, content:data.content , page:data , count: this.state.count + 1}, ()=>{\r\n      this.onToggleModal(\"editPageState\");\r\n    })\r\n  };\r\n\r\n  onAddPage = async (data) => {\r\n    await this.props.CreatePage({data})\r\n    message.success('تمت العملية بنجاح')\r\n    await this.props.fetchPages()\r\n  };\r\n\r\n  onSavePage = async (data) => {\r\n    console.log(data)\r\n    await this.props.UpdatePage({data})\r\n    message.success('تمت العملية بنجاح')\r\n    await this.props.fetchPages()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeletePages({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchPages()\r\n      message.success('تم حذف الصفحة');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  }  \r\n\r\n  render() {\r\n    const {loading, selectedRowKeys , name , content , id , page , visible , count} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: 'slug',\r\n      dataIndex: 'slug',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditPage(data)}  type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n\r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Pages\"/></h1>}>\r\n            <Button onClick={() => this.onToggleModal('addPageState')}  size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Badge count={this.state.selectedRowKeys.length}>\r\n              <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n                <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n              </Popconfirm>\r\n            </Badge>\r\n          \r\n          <AddPage open={this.state.addPageState} onAddPage={this.onAddPage} onToggleModal={this.onToggleModal} />\r\n          <EditPage count={count} open={this.state.editPageState} page={page} id={id} name={name} content={content} onSavePage={this.onSavePage} onToggleModal={this.onToggleModal} />\r\n          <Table locale={{emptyText:'لا توجد أي بيانات'}} rowKey={record => record.id}  dir=\"rtl\" bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.pages}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pages: state.pages,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchPages , CreatePage , UpdatePage , DeletePages})(Pages)\r\n"],"sourceRoot":""}