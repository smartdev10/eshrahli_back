{"version":3,"sources":["components/city/AddCity/index.js","components/city/EditCity/index.js","appRedux/actions/Cities.js","routes/settings/Cities/index.js","appRedux/actions/Subjects.js","components/subject/AddSubject/index.js","components/subject/EditSubject/index.js","routes/settings/Subjects/index.js","components/coupon/AddCoupon/index.js","components/coupon/EditCoupon/index.js","appRedux/actions/Coupons.js","routes/settings/Coupons/index.js","components/nationality/AddNationality/index.js","components/nationality/EditNationality/index.js","appRedux/actions/Nationalities.js","routes/settings/Nationalities/index.js","components/level/AddLevel/index.js","components/level/EditLevel/index.js","appRedux/actions/Levels.js","routes/settings/Levels/index.js","routes/settings/index.js"],"names":["AddCity","state","name","this","props","onAddCity","onToggleModal","open","okText","SaveFilled","cancelText","IntlMessages","id","title","toggle","visible","closable","onOk","setState","onCancel","className","defaultMessage","placeholder","required","value","onChange","event","target","margin","React","Component","memo","onSaveCity","city","useState","setName","useEffect","Object","keys","length","console","log","loadCities","cities","type","LOAD_CITIES","Cities","selectedRowKeys","loading","addCityState","editCityState","modal","onEditCity","data","a","CreateCity","fetchCities","UpdateCity","onSelectChange","confirm","ids","DeleteCity","then","message","success","catch","error","handleVisibleChange","cancel","e","rowSelection","hasSelected","columns","dataIndex","align","key","render","onClick","icon","EditOutlined","span","size","PlusCircleFilled","onVisibleChange","placement","onConfirm","DeleteOutlined","disabled","style","marginLeft","rowKey","record","dir","bordered","dataSource","connect","params","pagination","page","perPage","sort","field","order","filter","dispatch","dataProvider","res","err","FETCH_ERROR","payload","loadSubjects","subjects","LOAD_SUBJECTS","AddSubject","onAddSubject","onSaveSubject","subject","Subjects","addSubjectState","editSubjectState","onEditSubject","CreateSubject","fetchSubjects","UpdateSubject","DeleteSubject","direction","TextArea","Input","RangePicker","DatePicker","AddCoupon","dates","dateStrings","start","end","code","discount","description","onAddCoupon","ranges","Today","moment","endOf","onSaveCoupon","coupon","setCode","setDiscount","setDescription","setStartDate","setEndDate","loadCoupons","coupons","LOAD_COUPONS","Coupons","addCouponState","editCouponState","onEditCoupon","CreateCoupon","fetchCoupons","UpdateCoupon","DeleteCoupon","format","AddNationality","onAddNationality","onSaveNationality","nationality","loadNationalities","nationalities","LOAD_NATIONALITIES","Nationalities","addNationalityState","editNationalityState","onEditNationality","CreateNationality","fetchNationalities","UpdateNationality","DeleteNationalities","position","AddLevel","onAddLevel","onSaveLevel","level","loadLevels","levels","LOAD_LEVELS","Levels","addLevelState","editLevelState","onEditLevel","CreateLevel","fetchLevels","UpdateLevel","DeleteLevel","Settings","match","path","url","component"],"mappings":"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","file":"static/js/10.cc20e16f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass AddCity extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      name :''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onAddCity, onToggleModal, open } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"city.addCity\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addCityState\");\r\n          onAddCity({ name });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addCityState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCity;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst EditCity = ({ onSaveCity, onToggleModal, open, city }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(city).length !== 0){\r\n        console.log(city.name)\r\n        setName(city.name)\r\n      }\r\n    }, [city])\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"city.saveCity\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editCityState\");\r\n          onSaveCity({ id:city.id , name });\r\n          setName(name)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editCityState')\r\n          setName(city.name)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n              <Input\r\n                required\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                value={name}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditCity);\r\n","import { dataProvider } from 'util/Api'\r\nimport { LOAD_CITIES , FETCH_ERROR } from \"../../constants/ActionTypes\";\r\n\r\n\r\nexport const loadCities = cities => ({\r\n  type: LOAD_CITIES,\r\n  cities\r\n});\r\n\r\nexport const CreateCity = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"CREATE\", \"cities/create\", params)\r\n  };\r\n};\r\n\r\nexport const UpdateCity= (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"UPDATE\", \"cities/update\", params)\r\n  };\r\n};\r\n\r\nexport const DeleteCity = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"DELETE_MANY\", \"cities/delete\", params)\r\n  };\r\n};\r\n\r\nexport const fetchCities = (params = {\r\n  pagination: { page: 1, perPage: 10 },\r\n  sort: { field: 'name' , order: 'ASC' },\r\n  filter: {},\r\n}) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_LIST\", \"cities\", params).then((res)=>{\r\n      dispatch(loadCities(res))\r\n    }).catch(err => {\r\n      dispatch({type: FETCH_ERROR, payload: err.message});\r\n      console.log(\"Error****:\", err.message);\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchOneCity = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_ONE\", \"cities\", params)\r\n  };\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Button, Card, Table , Col , Row , message , Popconfirm , Divider} from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { PlusCircleFilled , DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport AddCity from \"components/city/AddCity\";\r\nimport EditCity from \"components/city/EditCity\";\r\nimport { fetchCities , CreateCity , UpdateCity , DeleteCity } from \"../../../appRedux/actions/Cities\";\r\n\r\n\r\nclass Cities extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    city:{\r\n      name:''\r\n    },\r\n    addCityState:false,\r\n    editCityState:false,\r\n    visible: false,\r\n  };\r\n \r\n  componentDidMount(){\r\n    this.props.fetchCities()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditCity = (data) => {\r\n    this.setState({city:data}, ()=>{\r\n      this.onToggleModal(\"editCityState\");\r\n    })\r\n  };\r\n\r\n  onAddCity = async (data) => {\r\n    await this.props.CreateCity({data})\r\n    await this.props.fetchCities()\r\n  };\r\n\r\n  onSaveCity = async (data) => {\r\n    await this.props.UpdateCity({data})\r\n    await this.props.fetchCities()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteCity({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchCities()\r\n      message.success('تم حذف المدينة');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n\r\n  render() {\r\n    const {loading, selectedRowKeys , city  , visible} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditCity(data)}  type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n    \r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Cities\"/></h1>}>\r\n            <Button onClick={() => this.onToggleModal('addCityState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddCity open={this.state.addCityState} onAddCity={this.onAddCity} onToggleModal={this.onToggleModal} />\r\n          <EditCity open={this.state.editCityState} city={city} onSaveCity={this.onSaveCity} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id} dir=\"rtl\" bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.cities}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    cities: state.cities,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,{ fetchCities , CreateCity , UpdateCity , DeleteCity } )(Cities)\r\n\r\n\r\n","import { dataProvider } from 'util/Api'\r\nimport { LOAD_SUBJECTS , FETCH_ERROR } from \"../../constants/ActionTypes\";\r\n\r\n\r\nexport const loadSubjects = subjects => ({\r\n  type: LOAD_SUBJECTS,\r\n  subjects\r\n});\r\n\r\nexport const CreateSubject = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"CREATE\", \"subjects/create\", params)\r\n  };\r\n};\r\n\r\nexport const UpdateSubject = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"UPDATE\", \"subjects/update\", params)\r\n  };\r\n};\r\n\r\nexport const DeleteSubject = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"DELETE_MANY\", \"subjects/delete\", params)\r\n  };\r\n};\r\n\r\nexport const fetchSubjects = (params = {\r\n  pagination: { page: 1, perPage: 10 },\r\n  sort: { field: 'name' , order: 'ASC' },\r\n  filter: {},\r\n}) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_LIST\", \"subjects\", params).then((res)=>{\r\n      dispatch(loadSubjects(res))\r\n    }).catch(err => {\r\n      dispatch({type: FETCH_ERROR, payload: err.message});\r\n      console.log(\"Error****:\", err.message);\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchOneSubject = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_ONE\", \"subjects\", params)\r\n  };\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass AddSubject extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      name :''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onAddSubject, onToggleModal, open } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"subject.addSubject\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addSubjectState\");\r\n          onAddSubject({ name });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addSubjectState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddSubject;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst EditSubject = ({ onSaveSubject, onToggleModal, open, subject }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(subject).length !== 0){\r\n        console.log(subject.name)\r\n        setName(subject.name)\r\n      }\r\n    }, [subject])\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"subject.saveSubject\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editSubjectState\");\r\n          onSaveSubject({ id:subject.id , name });\r\n          setName(name)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editSubjectState')\r\n          setName(subject.name)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n              <Input\r\n                required\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                value={name}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditSubject);\r\n","import React from \"react\";\r\nimport {Button, Card, Table  , Row , Col , Popconfirm , message , Divider } from \"antd\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport {PlusCircleFilled, DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport { fetchSubjects , CreateSubject , UpdateSubject , DeleteSubject } from \"../../../appRedux/actions/Subjects\";\r\nimport AddSubject from \"components/subject/AddSubject\";\r\nimport EditSubject from \"components/subject/EditSubject\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Subjects extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    subject:{\r\n      name:''\r\n    },\r\n    addSubjectState:false,\r\n    editSubjectState:false,\r\n    visible: false,\r\n  };\r\n \r\n  componentDidMount(){\r\n    this.props.fetchSubjects()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditSubject = (data) => {\r\n    this.setState({subject:data}, ()=>{\r\n      this.onToggleModal(\"editSubjectState\");\r\n    })\r\n  };\r\n\r\n  onAddSubject = async (data) => {\r\n    await this.props.CreateSubject({data})\r\n    await this.props.fetchSubjects()\r\n  };\r\n\r\n  onSaveSubject = async (data) => {\r\n    await this.props.UpdateSubject({data})\r\n    await this.props.fetchSubjects()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteSubject({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchSubjects()\r\n      message.success('تم حذف المادة');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n\r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {loading, selectedRowKeys , visible , subject} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditSubject(data)} type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n\r\n    \r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Materials\"/></h1>}>\r\n            <Button  onClick={() => this.onToggleModal('addSubjectState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddSubject open={this.state.addSubjectState} onAddSubject={this.onAddSubject} onToggleModal={this.onToggleModal} />\r\n          <EditSubject open={this.state.editSubjectState} subject={subject} onSaveSubject={this.onSaveSubject} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id} direction=\"rtl\"  bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.subjects}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    subjects: state.subjects,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchSubjects , CreateSubject , UpdateSubject , DeleteSubject })(Subjects)\r\n","import React from \"react\";\r\nimport { Input, Modal , DatePicker } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport moment from \"moment\";\r\n\r\nconst {TextArea} = Input;\r\nconst RangePicker = DatePicker.RangePicker;\r\n\r\nclass AddCoupon extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      name :'',\r\n      code:'',\r\n      discount:'',\r\n      description:'',\r\n      start:'',\r\n      end:''\r\n    }\r\n  }\r\n\r\n  onChange = (dates, dateStrings) => {\r\n    this.setState({ start:  dateStrings[0] , end:  dateStrings[1] })\r\n    console.log(dates);\r\n  }\r\n\r\n  render() {\r\n    const { onAddCoupon, onToggleModal, open } = this.props;\r\n    const { name , code , discount , start , end , description } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"coupon.addCoupon\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '' || code === '' || discount === '' || start === '' || end === '' || description === '')\r\n            return;\r\n          onToggleModal(\"addCouponState\");\r\n          onAddCoupon({ name , code , discount , start , end , description });\r\n          this.setState({ name: '' , code: '' , discount: '' , start: '' , end: '' , description:'' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addCouponState\")\r\n          this.setState({ name: '' , code: '' , discount: '' , start: '' , end: '' , description:'' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.code\" defaultMessage=\"code\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={code}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({code: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.discount\" defaultMessage=\"discount\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={discount}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({discount: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n              <FormattedMessage id=\"columns.description\" defaultMessage=\"description\">\r\n              {\r\n                placeholder => (\r\n                  <TextArea\r\n                  required\r\n                  value={description}\r\n                  placeholder={placeholder}\r\n                  onChange={(event) => this.setState({description: event.target.value})}\r\n                  margin=\"none\"/>\r\n                  )\r\n                }\r\n            </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.discount\" defaultMessage=\"discount\">\r\n             {\r\n               placeholder => (\r\n                <RangePicker  className=\"gx-mb-3 gx-w-100\" ranges={{Today: [moment(), moment()], 'This Month': [moment(), moment().endOf('month')]}} onChange={this.onChange} />\r\n               )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddCoupon;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal , DatePicker } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport moment from \"moment\";\r\n\r\nconst RangePicker = DatePicker.RangePicker;\r\nconst {TextArea} = Input;\r\n\r\n\r\nconst EditCoupon = ({ onSaveCoupon, onToggleModal, open, coupon }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n    const [code, setCode] = useState('')\r\n    const [discount, setDiscount] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [start, setStartDate] = useState('')\r\n    const [end, setEndDate] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(coupon).length !== 0){\r\n        console.log(coupon.name)\r\n        setName(coupon.name)\r\n        setCode(coupon.code)\r\n        setDiscount(coupon.discount)\r\n        setDescription(coupon.description)\r\n        setStartDate(coupon.start)\r\n        setEndDate(coupon.end)\r\n      }\r\n    }, [coupon])\r\n\r\n    const onChange = (dates, dateStrings) => {\r\n      setStartDate(dateStrings[0])\r\n      setEndDate(dateStrings[1])\r\n      console.log(dates);\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"coupon.saveCoupon\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editCouponState\");\r\n          onSaveCoupon({ id:coupon.id , name , code , discount , description , start , end });\r\n          setName(name)\r\n          setName(name)\r\n          setCode(code)\r\n          setDiscount(discount)\r\n          setDescription(description)\r\n          setStartDate(start)\r\n          setEndDate(end)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editCouponState')\r\n          setName(coupon.name)\r\n          setCode(coupon.code)\r\n          setDiscount(coupon.discount)\r\n          setDescription(coupon.description)\r\n          setStartDate(coupon.start)\r\n          setEndDate(coupon.end)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n          <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.code\" defaultMessage=\"code\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={code}\r\n                placeholder={placeholder}\r\n                onChange={(event) => setCode(event.target.value)}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.discount\" defaultMessage=\"discount\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={discount}\r\n                placeholder={placeholder}\r\n                onChange={(event) => setDiscount(event.target.value)}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n              <FormattedMessage id=\"columns.description\" defaultMessage=\"description\">\r\n              {\r\n                placeholder => (\r\n                  <TextArea\r\n                  required\r\n                  value={description}\r\n                  placeholder={placeholder}\r\n                  onChange={(event) =>   setDescription(event.target.value)}\r\n                  margin=\"none\"/>\r\n                  )\r\n                }\r\n            </FormattedMessage>\r\n            </div>\r\n\r\n            <div className=\"gx-form-group\">\r\n              <RangePicker value={[moment(start),moment(end)]} className=\"gx-mb-3 gx-w-100\" ranges={{Today: [moment(), moment()], 'This Month': [moment(), moment().endOf('month')]}} onChange={onChange} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditCoupon);\r\n","import { dataProvider } from 'util/Api'\r\nimport { LOAD_COUPONS , FETCH_ERROR } from \"../../constants/ActionTypes\";\r\n\r\n\r\nexport const loadCoupons = coupons => ({\r\n  type: LOAD_COUPONS,\r\n  coupons\r\n});\r\n\r\nexport const CreateCoupon = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"CREATE\", \"coupons/create\", params)\r\n  };\r\n};\r\n\r\nexport const UpdateCoupon = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"UPDATE\", \"coupons/update\", params)\r\n  };\r\n};\r\n\r\nexport const DeleteCoupon = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"DELETE_MANY\", \"coupons/delete\", params)\r\n  };\r\n};\r\n\r\nexport const fetchCoupons = (params = {\r\n  pagination: { page: 1, perPage: 10 },\r\n  sort: { field: 'name' , order: 'ASC' },\r\n  filter: {},\r\n}) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_LIST\", \"coupons\", params).then((res)=>{\r\n      dispatch(loadCoupons(res))\r\n    }).catch(err => {\r\n      dispatch({type: FETCH_ERROR, payload: err.message});\r\n      console.log(\"Error****:\", err.message);\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchOneCoupon = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_ONE\", \"coupons\", params)\r\n  };\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Button, Card, Table , Row , Col , Divider , Popconfirm , message } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport { PlusCircleFilled, DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport AddCoupon from \"components/coupon/AddCoupon\";\r\nimport EditCoupon from \"components/coupon/EditCoupon\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { fetchCoupons , CreateCoupon , UpdateCoupon , DeleteCoupon } from \"../../../appRedux/actions/Coupons\";\r\n\r\nclass Coupons extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    coupon:{\r\n      name:''\r\n    },\r\n    addCouponState:false,\r\n    editCouponState:false,\r\n    visible: false,\r\n  };\r\n\r\n  componentDidMount(){\r\n    this.props.fetchCoupons()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditCoupon = (data) => {\r\n    this.setState({coupon:data}, ()=>{\r\n      this.onToggleModal(\"editCouponState\");\r\n    })\r\n  };\r\n\r\n  onAddCoupon = async (data) => {\r\n    await this.props.CreateCoupon({data})\r\n    await this.props.fetchCoupons()\r\n  };\r\n\r\n  onSaveCoupon = async (data) => {\r\n    await this.props.UpdateCoupon({data})\r\n    await this.props.fetchCoupons()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteCoupon({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchCoupons()\r\n      message.success('تم حذف الكوبون');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n  \r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { loading , selectedRowKeys , visible , coupon } = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    }, {\r\n      title: <IntlMessages id=\"columns.code\"/>,\r\n      dataIndex: 'code',\r\n      align:'right'\r\n    }, {\r\n      title: <IntlMessages id=\"columns.discount\"/>,\r\n      dataIndex: 'discount',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.start\"/>,\r\n      dataIndex:'start',\r\n      key: 'start',\r\n      render: (start) => moment(start).format('DD-MM-YYYY'),\r\n      align:'right'\r\n    }, {\r\n      title: <IntlMessages id=\"columns.end\"/>,\r\n      dataIndex: 'end',\r\n      key: 'end' ,\r\n      render: (end) => moment(end).format('DD-MM-YYYY'),\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditCoupon(data)}   type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n\r\n    \r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Coupons\"/></h1>}>\r\n            <Button  onClick={() => this.onToggleModal('addCouponState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddCoupon open={this.state.addCouponState} onAddCoupon={this.onAddCoupon} onToggleModal={this.onToggleModal} />\r\n          <EditCoupon open={this.state.editCouponState} coupon={coupon} onSaveCoupon={this.onSaveCoupon} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id} direction=\"rtl\"  bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.coupons}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    coupons: state.coupons,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchCoupons , CreateCoupon , UpdateCoupon , DeleteCoupon })(Coupons)\r\n","import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass AddNationality extends React.Component {\r\n\r\n  state = {\r\n    name :''\r\n  }\r\n\r\n  render() {\r\n    const { onAddNationality, onToggleModal, open } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"nationality.addNationality\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addNationalityState\");\r\n          onAddNationality({ name });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addNationalityState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddNationality;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst EditNationality = ({ onSaveNationality , onToggleModal, open, nationality }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(nationality).length !== 0){\r\n        console.log(nationality.name)\r\n        setName(nationality.name)\r\n      }\r\n    }, [nationality])\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"nationality.saveNationality\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editNationalityState\");\r\n          onSaveNationality({ id:nationality.id , name });\r\n          setName(name)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editNationalityState')\r\n          setName(nationality.name)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n              <Input\r\n                required\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                value={name}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditNationality);\r\n","import { dataProvider } from 'util/Api'\r\nimport { LOAD_NATIONALITIES , FETCH_ERROR } from \"../../constants/ActionTypes\";\r\n\r\n\r\nexport const loadNationalities = nationalities => ({\r\n  type: LOAD_NATIONALITIES,\r\n  nationalities\r\n});\r\n\r\nexport const CreateNationality = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"CREATE\", \"nationalities/create\", params)\r\n  };\r\n};\r\n\r\nexport const UpdateNationality = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"UPDATE\", \"nationalities/update\", params)\r\n  };\r\n};\r\n\r\nexport const DeleteNationalities = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"DELETE_MANY\", \"nationalities/delete\", params)\r\n  };\r\n};\r\n\r\nexport const fetchNationalities = (params = {\r\n  pagination: { page: 1, perPage: 10 },\r\n  sort: { field: 'name' , order: 'ASC' },\r\n  filter: {},\r\n}) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_LIST\", \"nationalities\", params).then((res)=>{\r\n      dispatch(loadNationalities(res))\r\n    }).catch(err => {\r\n      dispatch({type: FETCH_ERROR, payload: err.message});\r\n      console.log(\"Error****:\", err.message);\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchOneNationality = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_ONE\", \"nationalities\", params)\r\n  };\r\n};\r\n\r\n","import React from \"react\";\r\nimport {Button, Card, Table  , Row , Col , message , Divider , Popconfirm} from \"antd\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport AddNationality from \"components/nationality/AddNationality\";\r\nimport EditNationality from \"components/nationality/EditNationality\";\r\nimport {PlusCircleFilled, DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport { fetchNationalities , CreateNationality , UpdateNationality , DeleteNationalities } from \"../../../appRedux/actions/Nationalities\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nclass Nationalities extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    nationality:{\r\n      name:''\r\n    },\r\n    addNationalityState:false,\r\n    editNationalityState:false,\r\n    visible: false,\r\n  };\r\n  componentDidMount(){\r\n    this.props.fetchNationalities()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditNationality = (data) => {\r\n    this.setState({nationality:data}, ()=>{\r\n      this.onToggleModal(\"editNationalityState\");\r\n    })\r\n  };\r\n\r\n  onAddNationality = async (data) => {\r\n    await this.props.CreateNationality({data})\r\n    await this.props.fetchNationalities()\r\n  };\r\n\r\n  onSaveNationality = async (data) => {\r\n    await this.props.UpdateNationality({data})\r\n    await this.props.fetchNationalities()\r\n  };\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteNationalities({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchNationalities()\r\n      message.success('تم حذف الجنسية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n  \r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {loading, selectedRowKeys , visible , nationality} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditNationality(data)}  type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n\r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Nationalities\"/></h1>}>\r\n            <Button onClick={() => this.onToggleModal('addNationalityState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddNationality open={this.state.addNationalityState} onAddNationality={this.onAddNationality} onToggleModal={this.onToggleModal} />\r\n          <EditNationality open={this.state.editNationalityState} nationality={nationality} onSaveNationality={this.onSaveNationality} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id}  pagination={{position:'bottom center'}}  bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.nationalities}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    nationalities: state.nationalities,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchNationalities , CreateNationality , UpdateNationality , DeleteNationalities })(Nationalities)\r\n","import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nclass AddLevel extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      name :''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onAddLevel, onToggleModal, open } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"level.addLevel\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addLevelState\");\r\n          onAddLevel({ name });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addLevelState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n                <Input\r\n                required\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={(event) => this.setState({name: event.target.value})}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddLevel;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst EditLevel = ({ onSaveLevel, onToggleModal, open, level }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n      if(Object.keys(level).length !== 0){\r\n        console.log(level.name)\r\n        setName(level.name)\r\n      }\r\n    }, [level])\r\n\r\n    return (\r\n      <Modal\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"level.saveLevel\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"editLevelState\");\r\n          onSaveLevel({ id:level.id , name });\r\n          setName(name)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editLevelState')\r\n          setName(level.name)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n            <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n             {\r\n               placeholder => (\r\n              <Input\r\n                required\r\n                placeholder={placeholder}\r\n                onChange={(event) => setName(event.target.value)}\r\n                value={name}\r\n                margin=\"none\"/>\r\n                )\r\n              }\r\n           </FormattedMessage>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditLevel);\r\n","import { dataProvider } from 'util/Api'\r\nimport { LOAD_LEVELS , FETCH_ERROR } from \"../../constants/ActionTypes\";\r\n\r\n\r\nexport const loadLevels = levels => ({\r\n  type: LOAD_LEVELS,\r\n  levels\r\n});\r\n\r\nexport const CreateLevel = (params) => {\r\n  console.log(params)\r\n  return dispatch => {\r\n    return dataProvider(\"CREATE\", \"levels/create\", params)\r\n  };\r\n};\r\n\r\nexport const UpdateLevel = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"UPDATE\", \"levels/update\", params)\r\n  };\r\n};\r\n\r\nexport const DeleteLevel = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"DELETE_MANY\", \"levels/delete\", params)\r\n  };\r\n};\r\n\r\nexport const fetchLevels = (params = {\r\n  pagination: { page: 1, perPage: 10 },\r\n  sort: { field: 'name' , order: 'ASC' },\r\n  filter: {},\r\n}) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_LIST\", \"levels\", params).then((res)=>{\r\n      dispatch(loadLevels(res))\r\n    }).catch(err => {\r\n      dispatch({type: FETCH_ERROR, payload: err.message});\r\n      console.log(\"Error****:\", err.message);\r\n    });\r\n  };\r\n};\r\n\r\n\r\nexport const fetchOneLevel = (params) => {\r\n  return dispatch => {\r\n    return dataProvider(\"GET_ONE\", \"levels\", params)\r\n  };\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Button, Card, Table , Col , Row , Popconfirm , message , Divider } from \"antd\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport {PlusCircleFilled, DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport AddLevel from \"components/level/AddLevel\";\r\nimport EditLevel from \"components/level/EditLevel\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchLevels , CreateLevel , UpdateLevel , DeleteLevel } from \"../../../appRedux/actions/Levels\";\r\n\r\n\r\n\r\nclass Levels extends React.Component {\r\n\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    level:{\r\n      name:''\r\n    },\r\n    addLevelState:false,\r\n    editLevelState:false,\r\n    visible: false,\r\n  };\r\n  \r\n  componentDidMount(){\r\n    this.props.fetchLevels()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditLevel = (data) => {\r\n    this.setState({level:data}, ()=>{\r\n      this.onToggleModal(\"editLevelState\");\r\n    })\r\n  };\r\n\r\n  onAddLevel = async (data) => {\r\n    await this.props.CreateLevel({data})\r\n    await this.props.fetchLevels()\r\n  };\r\n\r\n  onSaveLevel = async (data) => {\r\n    await this.props.UpdateLevel({data})\r\n    await this.props.fetchLevels()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  } \r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeleteLevel({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchLevels()\r\n      message.success('تم حذف المستوى');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  render() {\r\n\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditLevel(data)}  type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n    \r\n    const { loading, selectedRowKeys , level, visible } = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Levels\"/></h1>}>\r\n            <Button  onClick={() => this.onToggleModal('addLevelState')} size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  placement=\"topLeft\"  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n              <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n            </Popconfirm>\r\n          <div className=\"gx-mb-3\">\r\n            <span style={{marginLeft: 8}}>\r\n              {hasSelected ? `تم تحديد ${selectedRowKeys.length} عناصر` : ''}\r\n            </span>\r\n          </div>\r\n          <AddLevel open={this.state.addLevelState} onAddLevel={this.onAddLevel} onToggleModal={this.onToggleModal} />\r\n          <EditLevel open={this.state.editLevelState} level={level} onSaveLevel={this.onSaveLevel} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id} dir=\"rtl\" bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.levels}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    levels: state.levels,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchLevels , CreateLevel , UpdateLevel , DeleteLevel })(Levels)\r\n\r\n","import React from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\n\r\nimport Cities from \"./Cities\";\r\nimport Subjects from \"./Subjects\";\r\nimport Coupons from \"./Coupons\";\r\nimport Nationalities from \"./Nationalities\";\r\nimport Levels from \"./Levels\";\r\n\r\n\r\nconst Settings = ({match}) => (\r\n  <Switch>\r\n    <Route path={`${match.url}/cities`} component={Cities}/>\r\n    <Route path={`${match.url}/levels`} component={Levels}/>\r\n    <Route path={`${match.url}/subjects`} component={Subjects}/>\r\n    <Route path={`${match.url}/coupons`} component={Coupons}/>\r\n    <Route path={`${match.url}/nationalities`} component={Nationalities}/>\r\n  </Switch>\r\n);\r\n\r\nexport default Settings;\r\n"],"sourceRoot":""}