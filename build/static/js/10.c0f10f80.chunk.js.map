{"version":3,"sources":["components/page/AddPage/index.js","components/page/EditPage/index.js","routes/cms/index.js"],"names":["AddPage","state","name","editorState","onEditorStateChange","setState","this","props","onAddPage","onToggleModal","open","width","okText","SaveFilled","cancelText","IntlMessages","id","title","toggle","visible","closable","onOk","content","draftToHtml","convertToRaw","getCurrentContent","onCancel","className","defaultMessage","placeholder","required","value","onChange","event","target","margin","textAlignment","toolbarClassName","wrapperClassName","editorClassName","React","Component","memo","contentState","editorState1","onSavePage","page","useState","setName","setEditorState","setContent","blocksFromHtml","htmlToDraft","contentBlocks","entityMap","ContentState","createFromBlockArray","EditorState","createWithContent","useEffect","Object","keys","length","body","defaultEditorState","Pages","selectedRowKeys","loading","addPageState","editPageState","modal","onEditPage","data","a","CreatePage","fetchPages","console","log","UpdatePage","onSelectChange","confirm","ids","DeletePages","then","message","success","catch","error","handleVisibleChange","cancel","e","rowSelection","hasSelected","columns","dataIndex","align","key","render","onClick","type","icon","EditOutlined","span","size","PlusCircleFilled","count","onVisibleChange","onConfirm","DeleteOutlined","disabled","rowKey","record","dir","bordered","dataSource","pages","connect"],"mappings":"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","file":"static/js/10.c0f10f80.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport { convertToRaw } from 'draft-js';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n\r\nclass AddPage extends React.Component {\r\n  \r\n  state = {\r\n    name :'',\r\n    editorState:''\r\n  }\r\n\r\n  onEditorStateChange = (editorState) => {\r\n    this.setState({editorState})\r\n  };\r\n\r\n\r\n  render() {\r\n    const { onAddPage, onToggleModal, open } = this.props;\r\n    const { name , editorState } = this.state;\r\n    return (\r\n      <Modal\r\n        width={'80%'}\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"page.addPage\"/>}\r\n        toggle={onToggleModal} visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '')\r\n            return;\r\n          onToggleModal(\"addPageState\");\r\n          onAddPage({ name , content:draftToHtml(convertToRaw(editorState.getCurrentContent())) });\r\n          this.setState({ name: '' })\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal(\"addPageState\")\r\n          this.setState({ name: '' })\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n              <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n              {\r\n                placeholder => (\r\n                  <Input\r\n                  required\r\n                  value={name}\r\n                  placeholder={placeholder}\r\n                  onChange={(event) => this.setState({name: event.target.value})}\r\n                  margin=\"none\"/>\r\n                  )\r\n                }\r\n            </FormattedMessage>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n              <Editor\r\n                textAlignment=\"right\"\r\n                toolbarClassName=\"toolbarClassName\"\r\n                wrapperClassName=\"wrapperClassName\"\r\n                editorClassName=\"editorClassName\"\r\n                onEditorStateChange={this.onEditorStateChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPage;\r\n","import React , { useState , useEffect } from \"react\";\r\nimport { Input, Modal } from \"antd\";\r\nimport { EditorState, ContentState , convertToRaw } from 'draft-js';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport { SaveFilled } from \"@ant-design/icons\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n\r\n\r\nconst EditPage = ({ onSavePage, onToggleModal, open, page }) => {\r\n  \r\n    const [name, setName] = useState('')\r\n    const [editorState, setEditorState] = useState(null)\r\n    const [content, setContent] = useState(null)\r\n\r\n    let contentState;\r\n    let editorState1;\r\n    if(content){\r\n      const blocksFromHtml = htmlToDraft(content);\r\n      const { contentBlocks, entityMap } = blocksFromHtml;\r\n      contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\r\n      editorState1 = EditorState.createWithContent(contentState);\r\n    }\r\n\r\n\r\n    const onEditorStateChange = (editorState) => {\r\n      setEditorState(editorState)\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n      if(Object.keys(page).length !== 0){\r\n        setName(page.name)\r\n        setContent(page.content)\r\n      }\r\n    }, [page])\r\n\r\n    return (\r\n      <Modal\r\n        width={'80%'}\r\n        okText={<SaveFilled />}\r\n        cancelText={ <IntlMessages id=\"modal.cancelSave\"/> }\r\n        title={<IntlMessages id=\"city.saveCity\"/>}\r\n        toggle={onToggleModal} \r\n        visible={open}\r\n        closable={false}\r\n        onOk={() => {\r\n          if (name === '' || content === '')\r\n            return;\r\n          onToggleModal(\"editPageState\");\r\n          let body = content\r\n          if(editorState){\r\n            body = draftToHtml(convertToRaw(editorState.getCurrentContent()))\r\n          }\r\n          onSavePage({ id:page.id , name , content:body });\r\n          setName(name)\r\n          setContent(null)\r\n        }}\r\n        onCancel={()=> {\r\n          onToggleModal('editPageState')\r\n          setName(page.name)\r\n          setContent(null)\r\n        }}>\r\n\r\n        <div  className=\"gx-modal-box-row\">\r\n          <div className=\"gx-modal-box-form-item\">\r\n            <div className=\"gx-form-group\">\r\n              <FormattedMessage id=\"columns.name\" defaultMessage=\"name\">\r\n              {\r\n                placeholder => (\r\n                <Input\r\n                  required\r\n                  placeholder={placeholder}\r\n                  onChange={(event) => setName(event.target.value)}\r\n                  value={name}\r\n                  margin=\"none\"/>\r\n                  )\r\n                }\r\n            </FormattedMessage>\r\n            </div>\r\n            <div className=\"gx-form-group\">\r\n              <Editor\r\n                defaultEditorState={editorState1}\r\n                textAlignment=\"right\"\r\n                toolbarClassName=\"toolbarClassName\"\r\n                wrapperClassName=\"wrapperClassName\"\r\n                editorClassName=\"editorClassName\"\r\n                onEditorStateChange={onEditorStateChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n}\r\n\r\nexport default React.memo(EditPage);\r\n","import React from \"react\";\r\nimport { Button, Card, Table , Col , Row , message , Divider , Popconfirm , Badge } from \"antd\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport AddPage from \"components/page/AddPage\";\r\nimport EditPage from \"components/page/EditPage\";\r\nimport { PlusCircleFilled , DeleteOutlined , EditOutlined } from \"@ant-design/icons\";\r\nimport { fetchPages , CreatePage , UpdatePage , DeletePages } from \"appRedux/actions/Pages\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Pages extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n    page:{\r\n      name:''\r\n    },\r\n    addPageState:false,\r\n    editPageState:false,\r\n    visible: false,\r\n  };\r\n  \r\n  componentDidMount(){\r\n    this.props.fetchPages()\r\n  }\r\n\r\n  onToggleModal = (modal) => {\r\n    this.setState(state => ({\r\n      [modal]:!state[modal],\r\n    }));\r\n  }\r\n\r\n  onEditPage = (data) => {\r\n    this.setState({page:data}, ()=>{\r\n      this.onToggleModal(\"editPageState\");\r\n    })\r\n  };\r\n\r\n  onAddPage = async (data) => {\r\n    await this.props.CreatePage({data})\r\n    await this.props.fetchPages()\r\n  };\r\n\r\n  onSavePage = async (data) => {\r\n    console.log(data)\r\n    await this.props.UpdatePage({data})\r\n    await this.props.fetchPages()\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({ selectedRowKeys });\r\n  };\r\n\r\n  confirm = (ids) => {\r\n    this.setState({ loading: true });\r\n    this.props.DeletePages({ids})\r\n    .then( async ()=>{\r\n      await this.props.fetchPages()\r\n      message.success('تم حذف الصفحة');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    }).catch(()=>{\r\n      message.error('عطل أثناء العملية');\r\n      this.setState({ loading: false , selectedRowKeys:[]});\r\n    });   \r\n  }\r\n\r\n  handleVisibleChange = (visible) => {\r\n    const { selectedRowKeys  } = this.state;\r\n  \r\n    if (selectedRowKeys.length > 0) {\r\n      this.setState({visible}); \r\n    }\r\n  };\r\n\r\n  cancel = (e) => {\r\n    this.setState({ selectedRowKeys:[]  });\r\n  }  \r\n\r\n  render() {\r\n    const {loading, selectedRowKeys , page , visible} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n\r\n    const columns = [{\r\n      title: <IntlMessages id=\"columns.name\"/>,\r\n      dataIndex: 'name',\r\n      align:'right'\r\n    },{\r\n      title: <IntlMessages id=\"columns.operation\"/>, dataIndex: '', key: 'x', render: (data) => (\r\n        <span>\r\n          <Button onClick={() => this.onEditPage(data)}  type=\"primary\" icon={<EditOutlined />} > تعديل </Button>\r\n        </span>\r\n      ),\r\n     align:'right'\r\n    }];\r\n\r\n    return (\r\n      <Row>\r\n       <Col span={24}>\r\n        <Card title={<h1><IntlMessages id=\"sidebar.Pages\"/></h1>}>\r\n            <Button onClick={() => this.onToggleModal('addPageState')}  size=\"large\" icon={<PlusCircleFilled />}  type=\"primary\" />\r\n            <Divider type=\"vertical\" />\r\n            <Badge count={this.state.selectedRowKeys.length}>\r\n              <Popconfirm visible={visible} onVisibleChange={this.handleVisibleChange}  title=\"هل أنت متأكد ؟\" onConfirm={ () => this.confirm(selectedRowKeys) } onCancel={this.cancel} okText=\"نعم\" cancelText=\"لا\">\r\n                <Button  size=\"large\" icon={<DeleteOutlined/>} disabled={!hasSelected} type=\"danger\" loading={loading} />\r\n              </Popconfirm>\r\n            </Badge>\r\n          \r\n          <AddPage open={this.state.addPageState} onAddPage={this.onAddPage} onToggleModal={this.onToggleModal} />\r\n          <EditPage open={this.state.editPageState} page={page} onSavePage={this.onSavePage} onToggleModal={this.onToggleModal} />\r\n          <Table rowKey={record => record.id}  dir=\"rtl\" bordered={true} className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={this.props.pages}/>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    pages: state.pages,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchPages , CreatePage , UpdatePage , DeletePages})(Pages)\r\n"],"sourceRoot":""}